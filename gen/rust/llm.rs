// Generated by `wit-bindgen` 0.33.0. DO NOT EDIT!
// Options used:
#[allow(dead_code)]
pub mod wasi {
  #[allow(dead_code)]
  pub mod cli {
    #[allow(dead_code, clippy::all)]
    pub mod stdout {
      #[used]
      #[doc(hidden)]
      static __FORCE_SECTION_REF: fn() =
      super::super::super::__link_custom_section_describing_imports;
      
      pub type OutputStream = super::super::super::wasi::io::streams::OutputStream;
      #[allow(unused_unsafe, clippy::all)]
      pub fn get_stdout() -> OutputStream{
        unsafe {

          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "wasi:cli/stdout@0.2.1")]
          extern "C" {
            #[link_name = "get-stdout"]
            fn wit_import() -> i32;
          }

          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import() -> i32{ unreachable!() }
          let ret = wit_import();
          super::super::super::wasi::io::streams::OutputStream::from_handle(ret as u32)
        }
      }

    }

    #[allow(dead_code, clippy::all)]
    pub mod stderr {
      #[used]
      #[doc(hidden)]
      static __FORCE_SECTION_REF: fn() =
      super::super::super::__link_custom_section_describing_imports;
      
      pub type OutputStream = super::super::super::wasi::io::streams::OutputStream;
      #[allow(unused_unsafe, clippy::all)]
      pub fn get_stderr() -> OutputStream{
        unsafe {

          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "wasi:cli/stderr@0.2.1")]
          extern "C" {
            #[link_name = "get-stderr"]
            fn wit_import() -> i32;
          }

          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import() -> i32{ unreachable!() }
          let ret = wit_import();
          super::super::super::wasi::io::streams::OutputStream::from_handle(ret as u32)
        }
      }

    }

    #[allow(dead_code, clippy::all)]
    pub mod stdin {
      #[used]
      #[doc(hidden)]
      static __FORCE_SECTION_REF: fn() =
      super::super::super::__link_custom_section_describing_imports;
      
      pub type InputStream = super::super::super::wasi::io::streams::InputStream;
      #[allow(unused_unsafe, clippy::all)]
      pub fn get_stdin() -> InputStream{
        unsafe {

          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "wasi:cli/stdin@0.2.1")]
          extern "C" {
            #[link_name = "get-stdin"]
            fn wit_import() -> i32;
          }

          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import() -> i32{ unreachable!() }
          let ret = wit_import();
          super::super::super::wasi::io::streams::InputStream::from_handle(ret as u32)
        }
      }

    }

    #[allow(dead_code, clippy::all)]
    pub mod environment {
      #[used]
      #[doc(hidden)]
      static __FORCE_SECTION_REF: fn() =
      super::super::super::__link_custom_section_describing_imports;
      
      use super::super::super::_rt;
      #[allow(unused_unsafe, clippy::all)]
      /// Get the POSIX-style environment variables.
      ///
      /// Each environment variable is provided as a pair of string variable names
      /// and string value.
      ///
      /// Morally, these are a value import, but until value imports are available
      /// in the component model, this import function should return the same
      /// values each time it is called.
      pub fn get_environment() -> _rt::Vec::<(_rt::String,_rt::String,)>{
        unsafe {
          #[repr(align(4))]
          struct RetArea([::core::mem::MaybeUninit::<u8>; 8]);
          let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
          let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "wasi:cli/environment@0.2.1")]
          extern "C" {
            #[link_name = "get-environment"]
            fn wit_import(_: *mut u8, );
          }

          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: *mut u8, ){ unreachable!() }
          wit_import(ptr0);
          let l1 = *ptr0.add(0).cast::<*mut u8>();
          let l2 = *ptr0.add(4).cast::<usize>();
          let base9 = l1;
          let len9 = l2;
          let mut result9 = _rt::Vec::with_capacity(len9);
          for i in 0..len9 {
            let base = base9.add(i * 16);
            let e9 = {
              let l3 = *base.add(0).cast::<*mut u8>();
              let l4 = *base.add(4).cast::<usize>();
              let len5 = l4;
              let bytes5 = _rt::Vec::from_raw_parts(l3.cast(), len5, len5);
              let l6 = *base.add(8).cast::<*mut u8>();
              let l7 = *base.add(12).cast::<usize>();
              let len8 = l7;
              let bytes8 = _rt::Vec::from_raw_parts(l6.cast(), len8, len8);

              (_rt::string_lift(bytes5), _rt::string_lift(bytes8))
            };
            result9.push(e9);
          }
          _rt::cabi_dealloc(base9, len9 * 16, 4);
          result9
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      /// Get the POSIX-style arguments to the program.
      pub fn get_arguments() -> _rt::Vec::<_rt::String>{
        unsafe {
          #[repr(align(4))]
          struct RetArea([::core::mem::MaybeUninit::<u8>; 8]);
          let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
          let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "wasi:cli/environment@0.2.1")]
          extern "C" {
            #[link_name = "get-arguments"]
            fn wit_import(_: *mut u8, );
          }

          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: *mut u8, ){ unreachable!() }
          wit_import(ptr0);
          let l1 = *ptr0.add(0).cast::<*mut u8>();
          let l2 = *ptr0.add(4).cast::<usize>();
          let base6 = l1;
          let len6 = l2;
          let mut result6 = _rt::Vec::with_capacity(len6);
          for i in 0..len6 {
            let base = base6.add(i * 8);
            let e6 = {
              let l3 = *base.add(0).cast::<*mut u8>();
              let l4 = *base.add(4).cast::<usize>();
              let len5 = l4;
              let bytes5 = _rt::Vec::from_raw_parts(l3.cast(), len5, len5);

              _rt::string_lift(bytes5)
            };
            result6.push(e6);
          }
          _rt::cabi_dealloc(base6, len6 * 8, 4);
          result6
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      /// Return a path that programs should use as their initial current working
      /// directory, interpreting `.` as shorthand for this.
      pub fn initial_cwd() -> Option<_rt::String>{
        unsafe {
          #[repr(align(4))]
          struct RetArea([::core::mem::MaybeUninit::<u8>; 12]);
          let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
          let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "wasi:cli/environment@0.2.1")]
          extern "C" {
            #[link_name = "initial-cwd"]
            fn wit_import(_: *mut u8, );
          }

          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: *mut u8, ){ unreachable!() }
          wit_import(ptr0);
          let l1 = i32::from(*ptr0.add(0).cast::<u8>());
          match l1 {
            0 => None,
            1 => {
              let e = {
                let l2 = *ptr0.add(4).cast::<*mut u8>();
                let l3 = *ptr0.add(8).cast::<usize>();
                let len4 = l3;
                let bytes4 = _rt::Vec::from_raw_parts(l2.cast(), len4, len4);

                _rt::string_lift(bytes4)
              };
              Some(e)
            }
            _ => _rt::invalid_enum_discriminant(),
          }
        }
      }

    }

  }
  #[allow(dead_code)]
  pub mod clocks {
    #[allow(dead_code, clippy::all)]
    pub mod wall_clock {
      #[used]
      #[doc(hidden)]
      static __FORCE_SECTION_REF: fn() =
      super::super::super::__link_custom_section_describing_imports;
      
      /// A time and date in seconds plus nanoseconds.
      #[repr(C)]
      #[derive(Clone, Copy)]
      pub struct Datetime {
        pub seconds: u64,
        pub nanoseconds: u32,
      }
      impl ::core::fmt::Debug for Datetime {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("Datetime").field("seconds", &self.seconds).field("nanoseconds", &self.nanoseconds).finish()
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      /// Read the current value of the clock.
      ///
      /// This clock is not monotonic, therefore calling this function repeatedly
      /// will not necessarily produce a sequence of non-decreasing values.
      ///
      /// The returned timestamps represent the number of seconds since
      /// 1970-01-01T00:00:00Z, also known as [POSIX's Seconds Since the Epoch],
      /// also known as [Unix Time].
      ///
      /// The nanoseconds field of the output is always less than 1000000000.
      ///
      /// [POSIX's Seconds Since the Epoch]: https://pubs.opengroup.org/onlinepubs/9699919799/xrat/V4_xbd_chap04.html#tag_21_04_16
      /// [Unix Time]: https://en.wikipedia.org/wiki/Unix_time
      pub fn now() -> Datetime{
        unsafe {
          #[repr(align(8))]
          struct RetArea([::core::mem::MaybeUninit::<u8>; 16]);
          let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
          let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "wasi:clocks/wall-clock@0.2.1")]
          extern "C" {
            #[link_name = "now"]
            fn wit_import(_: *mut u8, );
          }

          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: *mut u8, ){ unreachable!() }
          wit_import(ptr0);
          let l1 = *ptr0.add(0).cast::<i64>();
          let l2 = *ptr0.add(8).cast::<i32>();
          Datetime{
            seconds: l1 as u64,
            nanoseconds: l2 as u32,
          }
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      /// Query the resolution of the clock.
      ///
      /// The nanoseconds field of the output is always less than 1000000000.
      pub fn resolution() -> Datetime{
        unsafe {
          #[repr(align(8))]
          struct RetArea([::core::mem::MaybeUninit::<u8>; 16]);
          let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
          let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "wasi:clocks/wall-clock@0.2.1")]
          extern "C" {
            #[link_name = "resolution"]
            fn wit_import(_: *mut u8, );
          }

          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: *mut u8, ){ unreachable!() }
          wit_import(ptr0);
          let l1 = *ptr0.add(0).cast::<i64>();
          let l2 = *ptr0.add(8).cast::<i32>();
          Datetime{
            seconds: l1 as u64,
            nanoseconds: l2 as u32,
          }
        }
      }

    }

    #[allow(dead_code, clippy::all)]
    pub mod monotonic_clock {
      #[used]
      #[doc(hidden)]
      static __FORCE_SECTION_REF: fn() =
      super::super::super::__link_custom_section_describing_imports;
      
      use super::super::super::_rt;
      pub type Pollable = super::super::super::wasi::io::poll::Pollable;
      /// An instant in time, in nanoseconds. An instant is relative to an
      /// unspecified initial value, and can only be compared to instances from
      /// the same monotonic-clock.
      pub type Instant = u64;
      /// A duration of time, in nanoseconds.
      pub type Duration = u64;
      #[allow(unused_unsafe, clippy::all)]
      /// Read the current value of the clock.
      ///
      /// The clock is monotonic, therefore calling this function repeatedly will
      /// produce a sequence of non-decreasing values.
      pub fn now() -> Instant{
        unsafe {

          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "wasi:clocks/monotonic-clock@0.2.1")]
          extern "C" {
            #[link_name = "now"]
            fn wit_import() -> i64;
          }

          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import() -> i64{ unreachable!() }
          let ret = wit_import();
          ret as u64
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      /// Query the resolution of the clock. Returns the duration of time
      /// corresponding to a clock tick.
      pub fn resolution() -> Duration{
        unsafe {

          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "wasi:clocks/monotonic-clock@0.2.1")]
          extern "C" {
            #[link_name = "resolution"]
            fn wit_import() -> i64;
          }

          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import() -> i64{ unreachable!() }
          let ret = wit_import();
          ret as u64
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      /// Create a `pollable` which will resolve once the specified instant
      /// has occurred.
      pub fn subscribe_instant(when: Instant,) -> Pollable{
        unsafe {

          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "wasi:clocks/monotonic-clock@0.2.1")]
          extern "C" {
            #[link_name = "subscribe-instant"]
            fn wit_import(_: i64, ) -> i32;
          }

          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i64, ) -> i32{ unreachable!() }
          let ret = wit_import(_rt::as_i64(when));
          super::super::super::wasi::io::poll::Pollable::from_handle(ret as u32)
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      /// Create a `pollable` that will resolve after the specified duration has
      /// elapsed from the time this function is invoked.
      pub fn subscribe_duration(when: Duration,) -> Pollable{
        unsafe {

          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "wasi:clocks/monotonic-clock@0.2.1")]
          extern "C" {
            #[link_name = "subscribe-duration"]
            fn wit_import(_: i64, ) -> i32;
          }

          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i64, ) -> i32{ unreachable!() }
          let ret = wit_import(_rt::as_i64(when));
          super::super::super::wasi::io::poll::Pollable::from_handle(ret as u32)
        }
      }

    }

  }
  #[allow(dead_code)]
  pub mod filesystem {
    #[allow(dead_code, clippy::all)]
    pub mod types {
      #[used]
      #[doc(hidden)]
      static __FORCE_SECTION_REF: fn() =
      super::super::super::__link_custom_section_describing_imports;
      
      use super::super::super::_rt;
      pub type InputStream = super::super::super::wasi::io::streams::InputStream;
      pub type OutputStream = super::super::super::wasi::io::streams::OutputStream;
      pub type Error = super::super::super::wasi::io::streams::Error;
      pub type Datetime = super::super::super::wasi::clocks::wall_clock::Datetime;
      /// File size or length of a region within a file.
      pub type Filesize = u64;
      /// The type of a filesystem object referenced by a descriptor.
      ///
      /// Note: This was called `filetype` in earlier versions of WASI.
      #[repr(u8)]
      #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
      pub enum DescriptorType {
        /// The type of the descriptor or file is unknown or is different from
        /// any of the other types specified.
        Unknown,
        /// The descriptor refers to a block device inode.
        BlockDevice,
        /// The descriptor refers to a character device inode.
        CharacterDevice,
        /// The descriptor refers to a directory inode.
        Directory,
        /// The descriptor refers to a named pipe.
        Fifo,
        /// The file refers to a symbolic link inode.
        SymbolicLink,
        /// The descriptor refers to a regular file inode.
        RegularFile,
        /// The descriptor refers to a socket.
        Socket,
      }
      impl ::core::fmt::Debug for DescriptorType {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          match self {
            DescriptorType::Unknown => {
              f.debug_tuple("DescriptorType::Unknown").finish()
            }
            DescriptorType::BlockDevice => {
              f.debug_tuple("DescriptorType::BlockDevice").finish()
            }
            DescriptorType::CharacterDevice => {
              f.debug_tuple("DescriptorType::CharacterDevice").finish()
            }
            DescriptorType::Directory => {
              f.debug_tuple("DescriptorType::Directory").finish()
            }
            DescriptorType::Fifo => {
              f.debug_tuple("DescriptorType::Fifo").finish()
            }
            DescriptorType::SymbolicLink => {
              f.debug_tuple("DescriptorType::SymbolicLink").finish()
            }
            DescriptorType::RegularFile => {
              f.debug_tuple("DescriptorType::RegularFile").finish()
            }
            DescriptorType::Socket => {
              f.debug_tuple("DescriptorType::Socket").finish()
            }
          }
        }
      }

      impl DescriptorType{
        #[doc(hidden)]
        pub unsafe fn _lift(val: u8) -> DescriptorType{
          if !cfg!(debug_assertions) {
            return ::core::mem::transmute(val);
          }

          match val {
            0 => DescriptorType::Unknown,
            1 => DescriptorType::BlockDevice,
            2 => DescriptorType::CharacterDevice,
            3 => DescriptorType::Directory,
            4 => DescriptorType::Fifo,
            5 => DescriptorType::SymbolicLink,
            6 => DescriptorType::RegularFile,
            7 => DescriptorType::Socket,

            _ => panic!("invalid enum discriminant"),
          }
        }
      }

      wit_bindgen::rt::bitflags::bitflags! {
        /// Descriptor flags.
        ///
        /// Note: This was called `fdflags` in earlier versions of WASI.
        #[derive(PartialEq, Eq, PartialOrd, Ord, Hash, Debug, Clone, Copy)]
        pub struct DescriptorFlags: u8 {
          /// Read mode: Data can be read.
          const READ = 1 << 0;
          /// Write mode: Data can be written to.
          const WRITE = 1 << 1;
          /// Request that writes be performed according to synchronized I/O file
          /// integrity completion. The data stored in the file and the file's
          /// metadata are synchronized. This is similar to `O_SYNC` in POSIX.
          ///
          /// The precise semantics of this operation have not yet been defined for
          /// WASI. At this time, it should be interpreted as a request, and not a
          /// requirement.
          const FILE_INTEGRITY_SYNC = 1 << 2;
          /// Request that writes be performed according to synchronized I/O data
          /// integrity completion. Only the data stored in the file is
          /// synchronized. This is similar to `O_DSYNC` in POSIX.
          ///
          /// The precise semantics of this operation have not yet been defined for
          /// WASI. At this time, it should be interpreted as a request, and not a
          /// requirement.
          const DATA_INTEGRITY_SYNC = 1 << 3;
          /// Requests that reads be performed at the same level of integrity
          /// requested for writes. This is similar to `O_RSYNC` in POSIX.
          ///
          /// The precise semantics of this operation have not yet been defined for
          /// WASI. At this time, it should be interpreted as a request, and not a
          /// requirement.
          const REQUESTED_WRITE_SYNC = 1 << 4;
          /// Mutating directories mode: Directory contents may be mutated.
          ///
          /// When this flag is unset on a descriptor, operations using the
          /// descriptor which would create, rename, delete, modify the data or
          /// metadata of filesystem objects, or obtain another handle which
          /// would permit any of those, shall fail with `error-code::read-only` if
          /// they would otherwise succeed.
          ///
          /// This may only be set on directories.
          const MUTATE_DIRECTORY = 1 << 5;
        }
      }
      wit_bindgen::rt::bitflags::bitflags! {
        /// Flags determining the method of how paths are resolved.
        #[derive(PartialEq, Eq, PartialOrd, Ord, Hash, Debug, Clone, Copy)]
        pub struct PathFlags: u8 {
          /// As long as the resolved path corresponds to a symbolic link, it is
          /// expanded.
          const SYMLINK_FOLLOW = 1 << 0;
        }
      }
      wit_bindgen::rt::bitflags::bitflags! {
        /// Open flags used by `open-at`.
        #[derive(PartialEq, Eq, PartialOrd, Ord, Hash, Debug, Clone, Copy)]
        pub struct OpenFlags: u8 {
          /// Create file if it does not exist, similar to `O_CREAT` in POSIX.
          const CREATE = 1 << 0;
          /// Fail if not a directory, similar to `O_DIRECTORY` in POSIX.
          const DIRECTORY = 1 << 1;
          /// Fail if file already exists, similar to `O_EXCL` in POSIX.
          const EXCLUSIVE = 1 << 2;
          /// Truncate file to size 0, similar to `O_TRUNC` in POSIX.
          const TRUNCATE = 1 << 3;
        }
      }
      /// Number of hard links to an inode.
      pub type LinkCount = u64;
      /// File attributes.
      ///
      /// Note: This was called `filestat` in earlier versions of WASI.
      #[repr(C)]
      #[derive(Clone, Copy)]
      pub struct DescriptorStat {
        /// File type.
        pub type_: DescriptorType,
        /// Number of hard links to the file.
        pub link_count: LinkCount,
        /// For regular files, the file size in bytes. For symbolic links, the
        /// length in bytes of the pathname contained in the symbolic link.
        pub size: Filesize,
        /// Last data access timestamp.
        ///
        /// If the `option` is none, the platform doesn't maintain an access
        /// timestamp for this file.
        pub data_access_timestamp: Option<Datetime>,
        /// Last data modification timestamp.
        ///
        /// If the `option` is none, the platform doesn't maintain a
        /// modification timestamp for this file.
        pub data_modification_timestamp: Option<Datetime>,
        /// Last file status-change timestamp.
        ///
        /// If the `option` is none, the platform doesn't maintain a
        /// status-change timestamp for this file.
        pub status_change_timestamp: Option<Datetime>,
      }
      impl ::core::fmt::Debug for DescriptorStat {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("DescriptorStat").field("type", &self.type_).field("link-count", &self.link_count).field("size", &self.size).field("data-access-timestamp", &self.data_access_timestamp).field("data-modification-timestamp", &self.data_modification_timestamp).field("status-change-timestamp", &self.status_change_timestamp).finish()
        }
      }
      /// When setting a timestamp, this gives the value to set it to.
      #[derive(Clone, Copy)]
      pub enum NewTimestamp {
        /// Leave the timestamp set to its previous value.
        NoChange,
        /// Set the timestamp to the current time of the system clock associated
        /// with the filesystem.
        Now,
        /// Set the timestamp to the given value.
        Timestamp(Datetime),
      }
      impl ::core::fmt::Debug for NewTimestamp {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          match self {
            NewTimestamp::NoChange => {
              f.debug_tuple("NewTimestamp::NoChange").finish()
            }
            NewTimestamp::Now => {
              f.debug_tuple("NewTimestamp::Now").finish()
            }
            NewTimestamp::Timestamp(e) => {
              f.debug_tuple("NewTimestamp::Timestamp").field(e).finish()
            }
          }
        }
      }
      /// A directory entry.
      #[derive(Clone)]
      pub struct DirectoryEntry {
        /// The type of the file referred to by this directory entry.
        pub type_: DescriptorType,
        /// The name of the object.
        pub name: _rt::String,
      }
      impl ::core::fmt::Debug for DirectoryEntry {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("DirectoryEntry").field("type", &self.type_).field("name", &self.name).finish()
        }
      }
      /// Error codes returned by functions, similar to `errno` in POSIX.
      /// Not all of these error codes are returned by the functions provided by this
      /// API; some are used in higher-level library layers, and others are provided
      /// merely for alignment with POSIX.
      #[repr(u8)]
      #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
      pub enum ErrorCode {
        /// Permission denied, similar to `EACCES` in POSIX.
        Access,
        /// Resource unavailable, or operation would block, similar to `EAGAIN` and `EWOULDBLOCK` in POSIX.
        WouldBlock,
        /// Connection already in progress, similar to `EALREADY` in POSIX.
        Already,
        /// Bad descriptor, similar to `EBADF` in POSIX.
        BadDescriptor,
        /// Device or resource busy, similar to `EBUSY` in POSIX.
        Busy,
        /// Resource deadlock would occur, similar to `EDEADLK` in POSIX.
        Deadlock,
        /// Storage quota exceeded, similar to `EDQUOT` in POSIX.
        Quota,
        /// File exists, similar to `EEXIST` in POSIX.
        Exist,
        /// File too large, similar to `EFBIG` in POSIX.
        FileTooLarge,
        /// Illegal byte sequence, similar to `EILSEQ` in POSIX.
        IllegalByteSequence,
        /// Operation in progress, similar to `EINPROGRESS` in POSIX.
        InProgress,
        /// Interrupted function, similar to `EINTR` in POSIX.
        Interrupted,
        /// Invalid argument, similar to `EINVAL` in POSIX.
        Invalid,
        /// I/O error, similar to `EIO` in POSIX.
        Io,
        /// Is a directory, similar to `EISDIR` in POSIX.
        IsDirectory,
        /// Too many levels of symbolic links, similar to `ELOOP` in POSIX.
        Loop,
        /// Too many links, similar to `EMLINK` in POSIX.
        TooManyLinks,
        /// Message too large, similar to `EMSGSIZE` in POSIX.
        MessageSize,
        /// Filename too long, similar to `ENAMETOOLONG` in POSIX.
        NameTooLong,
        /// No such device, similar to `ENODEV` in POSIX.
        NoDevice,
        /// No such file or directory, similar to `ENOENT` in POSIX.
        NoEntry,
        /// No locks available, similar to `ENOLCK` in POSIX.
        NoLock,
        /// Not enough space, similar to `ENOMEM` in POSIX.
        InsufficientMemory,
        /// No space left on device, similar to `ENOSPC` in POSIX.
        InsufficientSpace,
        /// Not a directory or a symbolic link to a directory, similar to `ENOTDIR` in POSIX.
        NotDirectory,
        /// Directory not empty, similar to `ENOTEMPTY` in POSIX.
        NotEmpty,
        /// State not recoverable, similar to `ENOTRECOVERABLE` in POSIX.
        NotRecoverable,
        /// Not supported, similar to `ENOTSUP` and `ENOSYS` in POSIX.
        Unsupported,
        /// Inappropriate I/O control operation, similar to `ENOTTY` in POSIX.
        NoTty,
        /// No such device or address, similar to `ENXIO` in POSIX.
        NoSuchDevice,
        /// Value too large to be stored in data type, similar to `EOVERFLOW` in POSIX.
        Overflow,
        /// Operation not permitted, similar to `EPERM` in POSIX.
        NotPermitted,
        /// Broken pipe, similar to `EPIPE` in POSIX.
        Pipe,
        /// Read-only file system, similar to `EROFS` in POSIX.
        ReadOnly,
        /// Invalid seek, similar to `ESPIPE` in POSIX.
        InvalidSeek,
        /// Text file busy, similar to `ETXTBSY` in POSIX.
        TextFileBusy,
        /// Cross-device link, similar to `EXDEV` in POSIX.
        CrossDevice,
      }
      impl ErrorCode{
        pub fn name(&self) -> &'static str {
          match self {
            ErrorCode::Access => "access",
            ErrorCode::WouldBlock => "would-block",
            ErrorCode::Already => "already",
            ErrorCode::BadDescriptor => "bad-descriptor",
            ErrorCode::Busy => "busy",
            ErrorCode::Deadlock => "deadlock",
            ErrorCode::Quota => "quota",
            ErrorCode::Exist => "exist",
            ErrorCode::FileTooLarge => "file-too-large",
            ErrorCode::IllegalByteSequence => "illegal-byte-sequence",
            ErrorCode::InProgress => "in-progress",
            ErrorCode::Interrupted => "interrupted",
            ErrorCode::Invalid => "invalid",
            ErrorCode::Io => "io",
            ErrorCode::IsDirectory => "is-directory",
            ErrorCode::Loop => "loop",
            ErrorCode::TooManyLinks => "too-many-links",
            ErrorCode::MessageSize => "message-size",
            ErrorCode::NameTooLong => "name-too-long",
            ErrorCode::NoDevice => "no-device",
            ErrorCode::NoEntry => "no-entry",
            ErrorCode::NoLock => "no-lock",
            ErrorCode::InsufficientMemory => "insufficient-memory",
            ErrorCode::InsufficientSpace => "insufficient-space",
            ErrorCode::NotDirectory => "not-directory",
            ErrorCode::NotEmpty => "not-empty",
            ErrorCode::NotRecoverable => "not-recoverable",
            ErrorCode::Unsupported => "unsupported",
            ErrorCode::NoTty => "no-tty",
            ErrorCode::NoSuchDevice => "no-such-device",
            ErrorCode::Overflow => "overflow",
            ErrorCode::NotPermitted => "not-permitted",
            ErrorCode::Pipe => "pipe",
            ErrorCode::ReadOnly => "read-only",
            ErrorCode::InvalidSeek => "invalid-seek",
            ErrorCode::TextFileBusy => "text-file-busy",
            ErrorCode::CrossDevice => "cross-device",
          }
        }
        pub fn message(&self) -> &'static str {
          match self {
            ErrorCode::Access => "Permission denied, similar to `EACCES` in POSIX.",
            ErrorCode::WouldBlock => "Resource unavailable, or operation would block, similar to `EAGAIN` and `EWOULDBLOCK` in POSIX.",
            ErrorCode::Already => "Connection already in progress, similar to `EALREADY` in POSIX.",
            ErrorCode::BadDescriptor => "Bad descriptor, similar to `EBADF` in POSIX.",
            ErrorCode::Busy => "Device or resource busy, similar to `EBUSY` in POSIX.",
            ErrorCode::Deadlock => "Resource deadlock would occur, similar to `EDEADLK` in POSIX.",
            ErrorCode::Quota => "Storage quota exceeded, similar to `EDQUOT` in POSIX.",
            ErrorCode::Exist => "File exists, similar to `EEXIST` in POSIX.",
            ErrorCode::FileTooLarge => "File too large, similar to `EFBIG` in POSIX.",
            ErrorCode::IllegalByteSequence => "Illegal byte sequence, similar to `EILSEQ` in POSIX.",
            ErrorCode::InProgress => "Operation in progress, similar to `EINPROGRESS` in POSIX.",
            ErrorCode::Interrupted => "Interrupted function, similar to `EINTR` in POSIX.",
            ErrorCode::Invalid => "Invalid argument, similar to `EINVAL` in POSIX.",
            ErrorCode::Io => "I/O error, similar to `EIO` in POSIX.",
            ErrorCode::IsDirectory => "Is a directory, similar to `EISDIR` in POSIX.",
            ErrorCode::Loop => "Too many levels of symbolic links, similar to `ELOOP` in POSIX.",
            ErrorCode::TooManyLinks => "Too many links, similar to `EMLINK` in POSIX.",
            ErrorCode::MessageSize => "Message too large, similar to `EMSGSIZE` in POSIX.",
            ErrorCode::NameTooLong => "Filename too long, similar to `ENAMETOOLONG` in POSIX.",
            ErrorCode::NoDevice => "No such device, similar to `ENODEV` in POSIX.",
            ErrorCode::NoEntry => "No such file or directory, similar to `ENOENT` in POSIX.",
            ErrorCode::NoLock => "No locks available, similar to `ENOLCK` in POSIX.",
            ErrorCode::InsufficientMemory => "Not enough space, similar to `ENOMEM` in POSIX.",
            ErrorCode::InsufficientSpace => "No space left on device, similar to `ENOSPC` in POSIX.",
            ErrorCode::NotDirectory => "Not a directory or a symbolic link to a directory, similar to `ENOTDIR` in POSIX.",
            ErrorCode::NotEmpty => "Directory not empty, similar to `ENOTEMPTY` in POSIX.",
            ErrorCode::NotRecoverable => "State not recoverable, similar to `ENOTRECOVERABLE` in POSIX.",
            ErrorCode::Unsupported => "Not supported, similar to `ENOTSUP` and `ENOSYS` in POSIX.",
            ErrorCode::NoTty => "Inappropriate I/O control operation, similar to `ENOTTY` in POSIX.",
            ErrorCode::NoSuchDevice => "No such device or address, similar to `ENXIO` in POSIX.",
            ErrorCode::Overflow => "Value too large to be stored in data type, similar to `EOVERFLOW` in POSIX.",
            ErrorCode::NotPermitted => "Operation not permitted, similar to `EPERM` in POSIX.",
            ErrorCode::Pipe => "Broken pipe, similar to `EPIPE` in POSIX.",
            ErrorCode::ReadOnly => "Read-only file system, similar to `EROFS` in POSIX.",
            ErrorCode::InvalidSeek => "Invalid seek, similar to `ESPIPE` in POSIX.",
            ErrorCode::TextFileBusy => "Text file busy, similar to `ETXTBSY` in POSIX.",
            ErrorCode::CrossDevice => "Cross-device link, similar to `EXDEV` in POSIX.",
          }
        }
      }
      impl ::core::fmt::Debug for ErrorCode{
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("ErrorCode")
          .field("code", &(*self as i32))
          .field("name", &self.name())
          .field("message", &self.message())
          .finish()
        }
      }
      impl ::core::fmt::Display for ErrorCode{
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          write!(f, "{} (error {})", self.name(), *self as i32)
        }
      }

      impl std::error::Error for ErrorCode {}

      impl ErrorCode{
        #[doc(hidden)]
        pub unsafe fn _lift(val: u8) -> ErrorCode{
          if !cfg!(debug_assertions) {
            return ::core::mem::transmute(val);
          }

          match val {
            0 => ErrorCode::Access,
            1 => ErrorCode::WouldBlock,
            2 => ErrorCode::Already,
            3 => ErrorCode::BadDescriptor,
            4 => ErrorCode::Busy,
            5 => ErrorCode::Deadlock,
            6 => ErrorCode::Quota,
            7 => ErrorCode::Exist,
            8 => ErrorCode::FileTooLarge,
            9 => ErrorCode::IllegalByteSequence,
            10 => ErrorCode::InProgress,
            11 => ErrorCode::Interrupted,
            12 => ErrorCode::Invalid,
            13 => ErrorCode::Io,
            14 => ErrorCode::IsDirectory,
            15 => ErrorCode::Loop,
            16 => ErrorCode::TooManyLinks,
            17 => ErrorCode::MessageSize,
            18 => ErrorCode::NameTooLong,
            19 => ErrorCode::NoDevice,
            20 => ErrorCode::NoEntry,
            21 => ErrorCode::NoLock,
            22 => ErrorCode::InsufficientMemory,
            23 => ErrorCode::InsufficientSpace,
            24 => ErrorCode::NotDirectory,
            25 => ErrorCode::NotEmpty,
            26 => ErrorCode::NotRecoverable,
            27 => ErrorCode::Unsupported,
            28 => ErrorCode::NoTty,
            29 => ErrorCode::NoSuchDevice,
            30 => ErrorCode::Overflow,
            31 => ErrorCode::NotPermitted,
            32 => ErrorCode::Pipe,
            33 => ErrorCode::ReadOnly,
            34 => ErrorCode::InvalidSeek,
            35 => ErrorCode::TextFileBusy,
            36 => ErrorCode::CrossDevice,

            _ => panic!("invalid enum discriminant"),
          }
        }
      }

      /// File or memory access pattern advisory information.
      #[repr(u8)]
      #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
      pub enum Advice {
        /// The application has no advice to give on its behavior with respect
        /// to the specified data.
        Normal,
        /// The application expects to access the specified data sequentially
        /// from lower offsets to higher offsets.
        Sequential,
        /// The application expects to access the specified data in a random
        /// order.
        Random,
        /// The application expects to access the specified data in the near
        /// future.
        WillNeed,
        /// The application expects that it will not access the specified data
        /// in the near future.
        DontNeed,
        /// The application expects to access the specified data once and then
        /// not reuse it thereafter.
        NoReuse,
      }
      impl ::core::fmt::Debug for Advice {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          match self {
            Advice::Normal => {
              f.debug_tuple("Advice::Normal").finish()
            }
            Advice::Sequential => {
              f.debug_tuple("Advice::Sequential").finish()
            }
            Advice::Random => {
              f.debug_tuple("Advice::Random").finish()
            }
            Advice::WillNeed => {
              f.debug_tuple("Advice::WillNeed").finish()
            }
            Advice::DontNeed => {
              f.debug_tuple("Advice::DontNeed").finish()
            }
            Advice::NoReuse => {
              f.debug_tuple("Advice::NoReuse").finish()
            }
          }
        }
      }

      impl Advice{
        #[doc(hidden)]
        pub unsafe fn _lift(val: u8) -> Advice{
          if !cfg!(debug_assertions) {
            return ::core::mem::transmute(val);
          }

          match val {
            0 => Advice::Normal,
            1 => Advice::Sequential,
            2 => Advice::Random,
            3 => Advice::WillNeed,
            4 => Advice::DontNeed,
            5 => Advice::NoReuse,

            _ => panic!("invalid enum discriminant"),
          }
        }
      }

      /// A 128-bit hash value, split into parts because wasm doesn't have a
      /// 128-bit integer type.
      #[repr(C)]
      #[derive(Clone, Copy)]
      pub struct MetadataHashValue {
        /// 64 bits of a 128-bit hash value.
        pub lower: u64,
        /// Another 64 bits of a 128-bit hash value.
        pub upper: u64,
      }
      impl ::core::fmt::Debug for MetadataHashValue {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("MetadataHashValue").field("lower", &self.lower).field("upper", &self.upper).finish()
        }
      }
      /// A descriptor is a reference to a filesystem object, which may be a file,
      /// directory, named pipe, special file, or other object on which filesystem
      /// calls may be made.

      #[derive(Debug)]
      #[repr(transparent)]
      pub struct Descriptor{
        handle: _rt::Resource<Descriptor>,
      }

      impl Descriptor{
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
          Self {
            handle: _rt::Resource::from_handle(handle),
          }
        }

        #[doc(hidden)]
        pub fn take_handle(&self) -> u32 {
          _rt::Resource::take_handle(&self.handle)
        }

        #[doc(hidden)]
        pub fn handle(&self) -> u32 {
          _rt::Resource::handle(&self.handle)
        }
      }


      unsafe impl _rt::WasmResource for Descriptor{
        #[inline]
        unsafe fn drop(_handle: u32) {
          #[cfg(not(target_arch = "wasm32"))]
          unreachable!();

          #[cfg(target_arch = "wasm32")]
          {
            #[link(wasm_import_module = "wasi:filesystem/types@0.2.1")]
            extern "C" {
              #[link_name = "[resource-drop]descriptor"]
              fn drop(_: u32);
            }

            drop(_handle);
          }
        }
      }

      /// A stream of directory entries.

      #[derive(Debug)]
      #[repr(transparent)]
      pub struct DirectoryEntryStream{
        handle: _rt::Resource<DirectoryEntryStream>,
      }

      impl DirectoryEntryStream{
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
          Self {
            handle: _rt::Resource::from_handle(handle),
          }
        }

        #[doc(hidden)]
        pub fn take_handle(&self) -> u32 {
          _rt::Resource::take_handle(&self.handle)
        }

        #[doc(hidden)]
        pub fn handle(&self) -> u32 {
          _rt::Resource::handle(&self.handle)
        }
      }


      unsafe impl _rt::WasmResource for DirectoryEntryStream{
        #[inline]
        unsafe fn drop(_handle: u32) {
          #[cfg(not(target_arch = "wasm32"))]
          unreachable!();

          #[cfg(target_arch = "wasm32")]
          {
            #[link(wasm_import_module = "wasi:filesystem/types@0.2.1")]
            extern "C" {
              #[link_name = "[resource-drop]directory-entry-stream"]
              fn drop(_: u32);
            }

            drop(_handle);
          }
        }
      }

      impl Descriptor {
        #[allow(unused_unsafe, clippy::all)]
        /// Return a stream for reading from a file, if available.
        ///
        /// May fail with an error-code describing why the file cannot be read.
        ///
        /// Multiple read, write, and append streams may be active on the same open
        /// file and they do not interfere with each other.
        ///
        /// Note: This allows using `read-stream`, which is similar to `read` in POSIX.
        pub fn read_via_stream(&self,offset: Filesize,) -> Result<InputStream,ErrorCode>{
          unsafe {
            #[repr(align(4))]
            struct RetArea([::core::mem::MaybeUninit::<u8>; 8]);
            let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
            let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "wasi:filesystem/types@0.2.1")]
            extern "C" {
              #[link_name = "[method]descriptor.read-via-stream"]
              fn wit_import(_: i32, _: i64, _: *mut u8, );
            }

            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: i64, _: *mut u8, ){ unreachable!() }
            wit_import((self).handle() as i32, _rt::as_i64(offset), ptr0);
            let l1 = i32::from(*ptr0.add(0).cast::<u8>());
            match l1 {
              0 => {
                let e = {
                  let l2 = *ptr0.add(4).cast::<i32>();

                  super::super::super::wasi::io::streams::InputStream::from_handle(l2 as u32)
                };
                Ok(e)
              }
              1 => {
                let e = {
                  let l3 = i32::from(*ptr0.add(4).cast::<u8>());

                  ErrorCode::_lift(l3 as u8)
                };
                Err(e)
              }
              _ => _rt::invalid_enum_discriminant(),
            }
          }
        }
      }
      impl Descriptor {
        #[allow(unused_unsafe, clippy::all)]
        /// Return a stream for writing to a file, if available.
        ///
        /// May fail with an error-code describing why the file cannot be written.
        ///
        /// Note: This allows using `write-stream`, which is similar to `write` in
        /// POSIX.
        pub fn write_via_stream(&self,offset: Filesize,) -> Result<OutputStream,ErrorCode>{
          unsafe {
            #[repr(align(4))]
            struct RetArea([::core::mem::MaybeUninit::<u8>; 8]);
            let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
            let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "wasi:filesystem/types@0.2.1")]
            extern "C" {
              #[link_name = "[method]descriptor.write-via-stream"]
              fn wit_import(_: i32, _: i64, _: *mut u8, );
            }

            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: i64, _: *mut u8, ){ unreachable!() }
            wit_import((self).handle() as i32, _rt::as_i64(offset), ptr0);
            let l1 = i32::from(*ptr0.add(0).cast::<u8>());
            match l1 {
              0 => {
                let e = {
                  let l2 = *ptr0.add(4).cast::<i32>();

                  super::super::super::wasi::io::streams::OutputStream::from_handle(l2 as u32)
                };
                Ok(e)
              }
              1 => {
                let e = {
                  let l3 = i32::from(*ptr0.add(4).cast::<u8>());

                  ErrorCode::_lift(l3 as u8)
                };
                Err(e)
              }
              _ => _rt::invalid_enum_discriminant(),
            }
          }
        }
      }
      impl Descriptor {
        #[allow(unused_unsafe, clippy::all)]
        /// Return a stream for appending to a file, if available.
        ///
        /// May fail with an error-code describing why the file cannot be appended.
        ///
        /// Note: This allows using `write-stream`, which is similar to `write` with
        /// `O_APPEND` in in POSIX.
        pub fn append_via_stream(&self,) -> Result<OutputStream,ErrorCode>{
          unsafe {
            #[repr(align(4))]
            struct RetArea([::core::mem::MaybeUninit::<u8>; 8]);
            let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
            let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "wasi:filesystem/types@0.2.1")]
            extern "C" {
              #[link_name = "[method]descriptor.append-via-stream"]
              fn wit_import(_: i32, _: *mut u8, );
            }

            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: *mut u8, ){ unreachable!() }
            wit_import((self).handle() as i32, ptr0);
            let l1 = i32::from(*ptr0.add(0).cast::<u8>());
            match l1 {
              0 => {
                let e = {
                  let l2 = *ptr0.add(4).cast::<i32>();

                  super::super::super::wasi::io::streams::OutputStream::from_handle(l2 as u32)
                };
                Ok(e)
              }
              1 => {
                let e = {
                  let l3 = i32::from(*ptr0.add(4).cast::<u8>());

                  ErrorCode::_lift(l3 as u8)
                };
                Err(e)
              }
              _ => _rt::invalid_enum_discriminant(),
            }
          }
        }
      }
      impl Descriptor {
        #[allow(unused_unsafe, clippy::all)]
        /// Provide file advisory information on a descriptor.
        ///
        /// This is similar to `posix_fadvise` in POSIX.
        pub fn advise(&self,offset: Filesize,length: Filesize,advice: Advice,) -> Result<(),ErrorCode>{
          unsafe {
            #[repr(align(1))]
            struct RetArea([::core::mem::MaybeUninit::<u8>; 2]);
            let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 2]);
            let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "wasi:filesystem/types@0.2.1")]
            extern "C" {
              #[link_name = "[method]descriptor.advise"]
              fn wit_import(_: i32, _: i64, _: i64, _: i32, _: *mut u8, );
            }

            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: i64, _: i64, _: i32, _: *mut u8, ){ unreachable!() }
            wit_import((self).handle() as i32, _rt::as_i64(offset), _rt::as_i64(length), advice.clone() as i32, ptr0);
            let l1 = i32::from(*ptr0.add(0).cast::<u8>());
            match l1 {
              0 => {
                let e = ();
                Ok(e)
              }
              1 => {
                let e = {
                  let l2 = i32::from(*ptr0.add(1).cast::<u8>());

                  ErrorCode::_lift(l2 as u8)
                };
                Err(e)
              }
              _ => _rt::invalid_enum_discriminant(),
            }
          }
        }
      }
      impl Descriptor {
        #[allow(unused_unsafe, clippy::all)]
        /// Synchronize the data of a file to disk.
        ///
        /// This function succeeds with no effect if the file descriptor is not
        /// opened for writing.
        ///
        /// Note: This is similar to `fdatasync` in POSIX.
        pub fn sync_data(&self,) -> Result<(),ErrorCode>{
          unsafe {
            #[repr(align(1))]
            struct RetArea([::core::mem::MaybeUninit::<u8>; 2]);
            let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 2]);
            let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "wasi:filesystem/types@0.2.1")]
            extern "C" {
              #[link_name = "[method]descriptor.sync-data"]
              fn wit_import(_: i32, _: *mut u8, );
            }

            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: *mut u8, ){ unreachable!() }
            wit_import((self).handle() as i32, ptr0);
            let l1 = i32::from(*ptr0.add(0).cast::<u8>());
            match l1 {
              0 => {
                let e = ();
                Ok(e)
              }
              1 => {
                let e = {
                  let l2 = i32::from(*ptr0.add(1).cast::<u8>());

                  ErrorCode::_lift(l2 as u8)
                };
                Err(e)
              }
              _ => _rt::invalid_enum_discriminant(),
            }
          }
        }
      }
      impl Descriptor {
        #[allow(unused_unsafe, clippy::all)]
        /// Get flags associated with a descriptor.
        ///
        /// Note: This returns similar flags to `fcntl(fd, F_GETFL)` in POSIX.
        ///
        /// Note: This returns the value that was the `fs_flags` value returned
        /// from `fdstat_get` in earlier versions of WASI.
        pub fn get_flags(&self,) -> Result<DescriptorFlags,ErrorCode>{
          unsafe {
            #[repr(align(1))]
            struct RetArea([::core::mem::MaybeUninit::<u8>; 2]);
            let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 2]);
            let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "wasi:filesystem/types@0.2.1")]
            extern "C" {
              #[link_name = "[method]descriptor.get-flags"]
              fn wit_import(_: i32, _: *mut u8, );
            }

            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: *mut u8, ){ unreachable!() }
            wit_import((self).handle() as i32, ptr0);
            let l1 = i32::from(*ptr0.add(0).cast::<u8>());
            match l1 {
              0 => {
                let e = {
                  let l2 = i32::from(*ptr0.add(1).cast::<u8>());

                  DescriptorFlags::empty() | DescriptorFlags::from_bits_retain(((l2 as u8) << 0) as _)
                };
                Ok(e)
              }
              1 => {
                let e = {
                  let l3 = i32::from(*ptr0.add(1).cast::<u8>());

                  ErrorCode::_lift(l3 as u8)
                };
                Err(e)
              }
              _ => _rt::invalid_enum_discriminant(),
            }
          }
        }
      }
      impl Descriptor {
        #[allow(unused_unsafe, clippy::all)]
        /// Get the dynamic type of a descriptor.
        ///
        /// Note: This returns the same value as the `type` field of the `fd-stat`
        /// returned by `stat`, `stat-at` and similar.
        ///
        /// Note: This returns similar flags to the `st_mode & S_IFMT` value provided
        /// by `fstat` in POSIX.
        ///
        /// Note: This returns the value that was the `fs_filetype` value returned
        /// from `fdstat_get` in earlier versions of WASI.
        pub fn get_type(&self,) -> Result<DescriptorType,ErrorCode>{
          unsafe {
            #[repr(align(1))]
            struct RetArea([::core::mem::MaybeUninit::<u8>; 2]);
            let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 2]);
            let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "wasi:filesystem/types@0.2.1")]
            extern "C" {
              #[link_name = "[method]descriptor.get-type"]
              fn wit_import(_: i32, _: *mut u8, );
            }

            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: *mut u8, ){ unreachable!() }
            wit_import((self).handle() as i32, ptr0);
            let l1 = i32::from(*ptr0.add(0).cast::<u8>());
            match l1 {
              0 => {
                let e = {
                  let l2 = i32::from(*ptr0.add(1).cast::<u8>());

                  DescriptorType::_lift(l2 as u8)
                };
                Ok(e)
              }
              1 => {
                let e = {
                  let l3 = i32::from(*ptr0.add(1).cast::<u8>());

                  ErrorCode::_lift(l3 as u8)
                };
                Err(e)
              }
              _ => _rt::invalid_enum_discriminant(),
            }
          }
        }
      }
      impl Descriptor {
        #[allow(unused_unsafe, clippy::all)]
        /// Adjust the size of an open file. If this increases the file's size, the
        /// extra bytes are filled with zeros.
        ///
        /// Note: This was called `fd_filestat_set_size` in earlier versions of WASI.
        pub fn set_size(&self,size: Filesize,) -> Result<(),ErrorCode>{
          unsafe {
            #[repr(align(1))]
            struct RetArea([::core::mem::MaybeUninit::<u8>; 2]);
            let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 2]);
            let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "wasi:filesystem/types@0.2.1")]
            extern "C" {
              #[link_name = "[method]descriptor.set-size"]
              fn wit_import(_: i32, _: i64, _: *mut u8, );
            }

            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: i64, _: *mut u8, ){ unreachable!() }
            wit_import((self).handle() as i32, _rt::as_i64(size), ptr0);
            let l1 = i32::from(*ptr0.add(0).cast::<u8>());
            match l1 {
              0 => {
                let e = ();
                Ok(e)
              }
              1 => {
                let e = {
                  let l2 = i32::from(*ptr0.add(1).cast::<u8>());

                  ErrorCode::_lift(l2 as u8)
                };
                Err(e)
              }
              _ => _rt::invalid_enum_discriminant(),
            }
          }
        }
      }
      impl Descriptor {
        #[allow(unused_unsafe, clippy::all)]
        /// Adjust the timestamps of an open file or directory.
        ///
        /// Note: This is similar to `futimens` in POSIX.
        ///
        /// Note: This was called `fd_filestat_set_times` in earlier versions of WASI.
        pub fn set_times(&self,data_access_timestamp: NewTimestamp,data_modification_timestamp: NewTimestamp,) -> Result<(),ErrorCode>{
          unsafe {
            #[repr(align(1))]
            struct RetArea([::core::mem::MaybeUninit::<u8>; 2]);
            let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 2]);
            let (result1_0,result1_1,result1_2,) = match data_access_timestamp {
              NewTimestamp::NoChange=> {
                (0i32, 0i64, 0i32)
              }
              NewTimestamp::Now=> {
                (1i32, 0i64, 0i32)
              }
              NewTimestamp::Timestamp(e) => {
                let super::super::super::wasi::clocks::wall_clock::Datetime{ seconds:seconds0, nanoseconds:nanoseconds0, } = e;

                (2i32, _rt::as_i64(seconds0), _rt::as_i32(nanoseconds0))
              },
            };
            let (result3_0,result3_1,result3_2,) = match data_modification_timestamp {
              NewTimestamp::NoChange=> {
                (0i32, 0i64, 0i32)
              }
              NewTimestamp::Now=> {
                (1i32, 0i64, 0i32)
              }
              NewTimestamp::Timestamp(e) => {
                let super::super::super::wasi::clocks::wall_clock::Datetime{ seconds:seconds2, nanoseconds:nanoseconds2, } = e;

                (2i32, _rt::as_i64(seconds2), _rt::as_i32(nanoseconds2))
              },
            };
            let ptr4 = ret_area.0.as_mut_ptr().cast::<u8>();
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "wasi:filesystem/types@0.2.1")]
            extern "C" {
              #[link_name = "[method]descriptor.set-times"]
              fn wit_import(_: i32, _: i32, _: i64, _: i32, _: i32, _: i64, _: i32, _: *mut u8, );
            }

            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: i32, _: i64, _: i32, _: i32, _: i64, _: i32, _: *mut u8, ){ unreachable!() }
            wit_import((self).handle() as i32, result1_0, result1_1, result1_2, result3_0, result3_1, result3_2, ptr4);
            let l5 = i32::from(*ptr4.add(0).cast::<u8>());
            match l5 {
              0 => {
                let e = ();
                Ok(e)
              }
              1 => {
                let e = {
                  let l6 = i32::from(*ptr4.add(1).cast::<u8>());

                  ErrorCode::_lift(l6 as u8)
                };
                Err(e)
              }
              _ => _rt::invalid_enum_discriminant(),
            }
          }
        }
      }
      impl Descriptor {
        #[allow(unused_unsafe, clippy::all)]
        /// Read from a descriptor, without using and updating the descriptor's offset.
        ///
        /// This function returns a list of bytes containing the data that was
        /// read, along with a bool which, when true, indicates that the end of the
        /// file was reached. The returned list will contain up to `length` bytes; it
        /// may return fewer than requested, if the end of the file is reached or
        /// if the I/O operation is interrupted.
        ///
        /// In the future, this may change to return a `stream<u8, error-code>`.
        ///
        /// Note: This is similar to `pread` in POSIX.
        pub fn read(&self,length: Filesize,offset: Filesize,) -> Result<(_rt::Vec::<u8>,bool,),ErrorCode>{
          unsafe {
            #[repr(align(4))]
            struct RetArea([::core::mem::MaybeUninit::<u8>; 16]);
            let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
            let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "wasi:filesystem/types@0.2.1")]
            extern "C" {
              #[link_name = "[method]descriptor.read"]
              fn wit_import(_: i32, _: i64, _: i64, _: *mut u8, );
            }

            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: i64, _: i64, _: *mut u8, ){ unreachable!() }
            wit_import((self).handle() as i32, _rt::as_i64(length), _rt::as_i64(offset), ptr0);
            let l1 = i32::from(*ptr0.add(0).cast::<u8>());
            match l1 {
              0 => {
                let e = {
                  let l2 = *ptr0.add(4).cast::<*mut u8>();
                  let l3 = *ptr0.add(8).cast::<usize>();
                  let len4 = l3;
                  let l5 = i32::from(*ptr0.add(12).cast::<u8>());

                  (_rt::Vec::from_raw_parts(l2.cast(), len4, len4), _rt::bool_lift(l5 as u8))
                };
                Ok(e)
              }
              1 => {
                let e = {
                  let l6 = i32::from(*ptr0.add(4).cast::<u8>());

                  ErrorCode::_lift(l6 as u8)
                };
                Err(e)
              }
              _ => _rt::invalid_enum_discriminant(),
            }
          }
        }
      }
      impl Descriptor {
        #[allow(unused_unsafe, clippy::all)]
        /// Write to a descriptor, without using and updating the descriptor's offset.
        ///
        /// It is valid to write past the end of a file; the file is extended to the
        /// extent of the write, with bytes between the previous end and the start of
        /// the write set to zero.
        ///
        /// In the future, this may change to take a `stream<u8, error-code>`.
        ///
        /// Note: This is similar to `pwrite` in POSIX.
        pub fn write(&self,buffer: &[u8],offset: Filesize,) -> Result<Filesize,ErrorCode>{
          unsafe {
            #[repr(align(8))]
            struct RetArea([::core::mem::MaybeUninit::<u8>; 16]);
            let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
            let vec0 = buffer;
            let ptr0 = vec0.as_ptr().cast::<u8>();
            let len0 = vec0.len();
            let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "wasi:filesystem/types@0.2.1")]
            extern "C" {
              #[link_name = "[method]descriptor.write"]
              fn wit_import(_: i32, _: *mut u8, _: usize, _: i64, _: *mut u8, );
            }

            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: *mut u8, _: usize, _: i64, _: *mut u8, ){ unreachable!() }
            wit_import((self).handle() as i32, ptr0.cast_mut(), len0, _rt::as_i64(offset), ptr1);
            let l2 = i32::from(*ptr1.add(0).cast::<u8>());
            match l2 {
              0 => {
                let e = {
                  let l3 = *ptr1.add(8).cast::<i64>();

                  l3 as u64
                };
                Ok(e)
              }
              1 => {
                let e = {
                  let l4 = i32::from(*ptr1.add(8).cast::<u8>());

                  ErrorCode::_lift(l4 as u8)
                };
                Err(e)
              }
              _ => _rt::invalid_enum_discriminant(),
            }
          }
        }
      }
      impl Descriptor {
        #[allow(unused_unsafe, clippy::all)]
        /// Read directory entries from a directory.
        ///
        /// On filesystems where directories contain entries referring to themselves
        /// and their parents, often named `.` and `..` respectively, these entries
        /// are omitted.
        ///
        /// This always returns a new stream which starts at the beginning of the
        /// directory. Multiple streams may be active on the same directory, and they
        /// do not interfere with each other.
        pub fn read_directory(&self,) -> Result<DirectoryEntryStream,ErrorCode>{
          unsafe {
            #[repr(align(4))]
            struct RetArea([::core::mem::MaybeUninit::<u8>; 8]);
            let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
            let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "wasi:filesystem/types@0.2.1")]
            extern "C" {
              #[link_name = "[method]descriptor.read-directory"]
              fn wit_import(_: i32, _: *mut u8, );
            }

            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: *mut u8, ){ unreachable!() }
            wit_import((self).handle() as i32, ptr0);
            let l1 = i32::from(*ptr0.add(0).cast::<u8>());
            match l1 {
              0 => {
                let e = {
                  let l2 = *ptr0.add(4).cast::<i32>();

                  DirectoryEntryStream::from_handle(l2 as u32)
                };
                Ok(e)
              }
              1 => {
                let e = {
                  let l3 = i32::from(*ptr0.add(4).cast::<u8>());

                  ErrorCode::_lift(l3 as u8)
                };
                Err(e)
              }
              _ => _rt::invalid_enum_discriminant(),
            }
          }
        }
      }
      impl Descriptor {
        #[allow(unused_unsafe, clippy::all)]
        /// Synchronize the data and metadata of a file to disk.
        ///
        /// This function succeeds with no effect if the file descriptor is not
        /// opened for writing.
        ///
        /// Note: This is similar to `fsync` in POSIX.
        pub fn sync(&self,) -> Result<(),ErrorCode>{
          unsafe {
            #[repr(align(1))]
            struct RetArea([::core::mem::MaybeUninit::<u8>; 2]);
            let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 2]);
            let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "wasi:filesystem/types@0.2.1")]
            extern "C" {
              #[link_name = "[method]descriptor.sync"]
              fn wit_import(_: i32, _: *mut u8, );
            }

            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: *mut u8, ){ unreachable!() }
            wit_import((self).handle() as i32, ptr0);
            let l1 = i32::from(*ptr0.add(0).cast::<u8>());
            match l1 {
              0 => {
                let e = ();
                Ok(e)
              }
              1 => {
                let e = {
                  let l2 = i32::from(*ptr0.add(1).cast::<u8>());

                  ErrorCode::_lift(l2 as u8)
                };
                Err(e)
              }
              _ => _rt::invalid_enum_discriminant(),
            }
          }
        }
      }
      impl Descriptor {
        #[allow(unused_unsafe, clippy::all)]
        /// Create a directory.
        ///
        /// Note: This is similar to `mkdirat` in POSIX.
        pub fn create_directory_at(&self,path: &str,) -> Result<(),ErrorCode>{
          unsafe {
            #[repr(align(1))]
            struct RetArea([::core::mem::MaybeUninit::<u8>; 2]);
            let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 2]);
            let vec0 = path;
            let ptr0 = vec0.as_ptr().cast::<u8>();
            let len0 = vec0.len();
            let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "wasi:filesystem/types@0.2.1")]
            extern "C" {
              #[link_name = "[method]descriptor.create-directory-at"]
              fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8, );
            }

            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8, ){ unreachable!() }
            wit_import((self).handle() as i32, ptr0.cast_mut(), len0, ptr1);
            let l2 = i32::from(*ptr1.add(0).cast::<u8>());
            match l2 {
              0 => {
                let e = ();
                Ok(e)
              }
              1 => {
                let e = {
                  let l3 = i32::from(*ptr1.add(1).cast::<u8>());

                  ErrorCode::_lift(l3 as u8)
                };
                Err(e)
              }
              _ => _rt::invalid_enum_discriminant(),
            }
          }
        }
      }
      impl Descriptor {
        #[allow(unused_unsafe, clippy::all)]
        /// Return the attributes of an open file or directory.
        ///
        /// Note: This is similar to `fstat` in POSIX, except that it does not return
        /// device and inode information. For testing whether two descriptors refer to
        /// the same underlying filesystem object, use `is-same-object`. To obtain
        /// additional data that can be used do determine whether a file has been
        /// modified, use `metadata-hash`.
        ///
        /// Note: This was called `fd_filestat_get` in earlier versions of WASI.
        pub fn stat(&self,) -> Result<DescriptorStat,ErrorCode>{
          unsafe {
            #[repr(align(8))]
            struct RetArea([::core::mem::MaybeUninit::<u8>; 104]);
            let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 104]);
            let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "wasi:filesystem/types@0.2.1")]
            extern "C" {
              #[link_name = "[method]descriptor.stat"]
              fn wit_import(_: i32, _: *mut u8, );
            }

            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: *mut u8, ){ unreachable!() }
            wit_import((self).handle() as i32, ptr0);
            let l1 = i32::from(*ptr0.add(0).cast::<u8>());
            match l1 {
              0 => {
                let e = {
                  let l2 = i32::from(*ptr0.add(8).cast::<u8>());
                  let l3 = *ptr0.add(16).cast::<i64>();
                  let l4 = *ptr0.add(24).cast::<i64>();
                  let l5 = i32::from(*ptr0.add(32).cast::<u8>());
                  let l8 = i32::from(*ptr0.add(56).cast::<u8>());
                  let l11 = i32::from(*ptr0.add(80).cast::<u8>());

                  DescriptorStat{
                    type_: DescriptorType::_lift(l2 as u8),
                    link_count: l3 as u64,
                    size: l4 as u64,
                    data_access_timestamp: match l5 {
                      0 => None,
                      1 => {
                        let e = {
                          let l6 = *ptr0.add(40).cast::<i64>();
                          let l7 = *ptr0.add(48).cast::<i32>();

                          super::super::super::wasi::clocks::wall_clock::Datetime{
                            seconds: l6 as u64,
                            nanoseconds: l7 as u32,
                          }
                        };
                        Some(e)
                      }
                      _ => _rt::invalid_enum_discriminant(),
                    },
                    data_modification_timestamp: match l8 {
                      0 => None,
                      1 => {
                        let e = {
                          let l9 = *ptr0.add(64).cast::<i64>();
                          let l10 = *ptr0.add(72).cast::<i32>();

                          super::super::super::wasi::clocks::wall_clock::Datetime{
                            seconds: l9 as u64,
                            nanoseconds: l10 as u32,
                          }
                        };
                        Some(e)
                      }
                      _ => _rt::invalid_enum_discriminant(),
                    },
                    status_change_timestamp: match l11 {
                      0 => None,
                      1 => {
                        let e = {
                          let l12 = *ptr0.add(88).cast::<i64>();
                          let l13 = *ptr0.add(96).cast::<i32>();

                          super::super::super::wasi::clocks::wall_clock::Datetime{
                            seconds: l12 as u64,
                            nanoseconds: l13 as u32,
                          }
                        };
                        Some(e)
                      }
                      _ => _rt::invalid_enum_discriminant(),
                    },
                  }
                };
                Ok(e)
              }
              1 => {
                let e = {
                  let l14 = i32::from(*ptr0.add(8).cast::<u8>());

                  ErrorCode::_lift(l14 as u8)
                };
                Err(e)
              }
              _ => _rt::invalid_enum_discriminant(),
            }
          }
        }
      }
      impl Descriptor {
        #[allow(unused_unsafe, clippy::all)]
        /// Return the attributes of a file or directory.
        ///
        /// Note: This is similar to `fstatat` in POSIX, except that it does not
        /// return device and inode information. See the `stat` description for a
        /// discussion of alternatives.
        ///
        /// Note: This was called `path_filestat_get` in earlier versions of WASI.
        pub fn stat_at(&self,path_flags: PathFlags,path: &str,) -> Result<DescriptorStat,ErrorCode>{
          unsafe {
            #[repr(align(8))]
            struct RetArea([::core::mem::MaybeUninit::<u8>; 104]);
            let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 104]);
            let flags0 = path_flags;
            let vec1 = path;
            let ptr1 = vec1.as_ptr().cast::<u8>();
            let len1 = vec1.len();
            let ptr2 = ret_area.0.as_mut_ptr().cast::<u8>();
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "wasi:filesystem/types@0.2.1")]
            extern "C" {
              #[link_name = "[method]descriptor.stat-at"]
              fn wit_import(_: i32, _: i32, _: *mut u8, _: usize, _: *mut u8, );
            }

            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: i32, _: *mut u8, _: usize, _: *mut u8, ){ unreachable!() }
            wit_import((self).handle() as i32, (flags0.bits() >> 0) as i32, ptr1.cast_mut(), len1, ptr2);
            let l3 = i32::from(*ptr2.add(0).cast::<u8>());
            match l3 {
              0 => {
                let e = {
                  let l4 = i32::from(*ptr2.add(8).cast::<u8>());
                  let l5 = *ptr2.add(16).cast::<i64>();
                  let l6 = *ptr2.add(24).cast::<i64>();
                  let l7 = i32::from(*ptr2.add(32).cast::<u8>());
                  let l10 = i32::from(*ptr2.add(56).cast::<u8>());
                  let l13 = i32::from(*ptr2.add(80).cast::<u8>());

                  DescriptorStat{
                    type_: DescriptorType::_lift(l4 as u8),
                    link_count: l5 as u64,
                    size: l6 as u64,
                    data_access_timestamp: match l7 {
                      0 => None,
                      1 => {
                        let e = {
                          let l8 = *ptr2.add(40).cast::<i64>();
                          let l9 = *ptr2.add(48).cast::<i32>();

                          super::super::super::wasi::clocks::wall_clock::Datetime{
                            seconds: l8 as u64,
                            nanoseconds: l9 as u32,
                          }
                        };
                        Some(e)
                      }
                      _ => _rt::invalid_enum_discriminant(),
                    },
                    data_modification_timestamp: match l10 {
                      0 => None,
                      1 => {
                        let e = {
                          let l11 = *ptr2.add(64).cast::<i64>();
                          let l12 = *ptr2.add(72).cast::<i32>();

                          super::super::super::wasi::clocks::wall_clock::Datetime{
                            seconds: l11 as u64,
                            nanoseconds: l12 as u32,
                          }
                        };
                        Some(e)
                      }
                      _ => _rt::invalid_enum_discriminant(),
                    },
                    status_change_timestamp: match l13 {
                      0 => None,
                      1 => {
                        let e = {
                          let l14 = *ptr2.add(88).cast::<i64>();
                          let l15 = *ptr2.add(96).cast::<i32>();

                          super::super::super::wasi::clocks::wall_clock::Datetime{
                            seconds: l14 as u64,
                            nanoseconds: l15 as u32,
                          }
                        };
                        Some(e)
                      }
                      _ => _rt::invalid_enum_discriminant(),
                    },
                  }
                };
                Ok(e)
              }
              1 => {
                let e = {
                  let l16 = i32::from(*ptr2.add(8).cast::<u8>());

                  ErrorCode::_lift(l16 as u8)
                };
                Err(e)
              }
              _ => _rt::invalid_enum_discriminant(),
            }
          }
        }
      }
      impl Descriptor {
        #[allow(unused_unsafe, clippy::all)]
        /// Adjust the timestamps of a file or directory.
        ///
        /// Note: This is similar to `utimensat` in POSIX.
        ///
        /// Note: This was called `path_filestat_set_times` in earlier versions of
        /// WASI.
        pub fn set_times_at(&self,path_flags: PathFlags,path: &str,data_access_timestamp: NewTimestamp,data_modification_timestamp: NewTimestamp,) -> Result<(),ErrorCode>{
          unsafe {
            #[repr(align(1))]
            struct RetArea([::core::mem::MaybeUninit::<u8>; 2]);
            let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 2]);
            let flags0 = path_flags;
            let vec1 = path;
            let ptr1 = vec1.as_ptr().cast::<u8>();
            let len1 = vec1.len();
            let (result3_0,result3_1,result3_2,) = match data_access_timestamp {
              NewTimestamp::NoChange=> {
                (0i32, 0i64, 0i32)
              }
              NewTimestamp::Now=> {
                (1i32, 0i64, 0i32)
              }
              NewTimestamp::Timestamp(e) => {
                let super::super::super::wasi::clocks::wall_clock::Datetime{ seconds:seconds2, nanoseconds:nanoseconds2, } = e;

                (2i32, _rt::as_i64(seconds2), _rt::as_i32(nanoseconds2))
              },
            };
            let (result5_0,result5_1,result5_2,) = match data_modification_timestamp {
              NewTimestamp::NoChange=> {
                (0i32, 0i64, 0i32)
              }
              NewTimestamp::Now=> {
                (1i32, 0i64, 0i32)
              }
              NewTimestamp::Timestamp(e) => {
                let super::super::super::wasi::clocks::wall_clock::Datetime{ seconds:seconds4, nanoseconds:nanoseconds4, } = e;

                (2i32, _rt::as_i64(seconds4), _rt::as_i32(nanoseconds4))
              },
            };
            let ptr6 = ret_area.0.as_mut_ptr().cast::<u8>();
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "wasi:filesystem/types@0.2.1")]
            extern "C" {
              #[link_name = "[method]descriptor.set-times-at"]
              fn wit_import(_: i32, _: i32, _: *mut u8, _: usize, _: i32, _: i64, _: i32, _: i32, _: i64, _: i32, _: *mut u8, );
            }

            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: i32, _: *mut u8, _: usize, _: i32, _: i64, _: i32, _: i32, _: i64, _: i32, _: *mut u8, ){ unreachable!() }
            wit_import((self).handle() as i32, (flags0.bits() >> 0) as i32, ptr1.cast_mut(), len1, result3_0, result3_1, result3_2, result5_0, result5_1, result5_2, ptr6);
            let l7 = i32::from(*ptr6.add(0).cast::<u8>());
            match l7 {
              0 => {
                let e = ();
                Ok(e)
              }
              1 => {
                let e = {
                  let l8 = i32::from(*ptr6.add(1).cast::<u8>());

                  ErrorCode::_lift(l8 as u8)
                };
                Err(e)
              }
              _ => _rt::invalid_enum_discriminant(),
            }
          }
        }
      }
      impl Descriptor {
        #[allow(unused_unsafe, clippy::all)]
        /// Create a hard link.
        ///
        /// Note: This is similar to `linkat` in POSIX.
        pub fn link_at(&self,old_path_flags: PathFlags,old_path: &str,new_descriptor: &Descriptor,new_path: &str,) -> Result<(),ErrorCode>{
          unsafe {
            #[repr(align(1))]
            struct RetArea([::core::mem::MaybeUninit::<u8>; 2]);
            let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 2]);
            let flags0 = old_path_flags;
            let vec1 = old_path;
            let ptr1 = vec1.as_ptr().cast::<u8>();
            let len1 = vec1.len();
            let vec2 = new_path;
            let ptr2 = vec2.as_ptr().cast::<u8>();
            let len2 = vec2.len();
            let ptr3 = ret_area.0.as_mut_ptr().cast::<u8>();
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "wasi:filesystem/types@0.2.1")]
            extern "C" {
              #[link_name = "[method]descriptor.link-at"]
              fn wit_import(_: i32, _: i32, _: *mut u8, _: usize, _: i32, _: *mut u8, _: usize, _: *mut u8, );
            }

            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: i32, _: *mut u8, _: usize, _: i32, _: *mut u8, _: usize, _: *mut u8, ){ unreachable!() }
            wit_import((self).handle() as i32, (flags0.bits() >> 0) as i32, ptr1.cast_mut(), len1, (new_descriptor).handle() as i32, ptr2.cast_mut(), len2, ptr3);
            let l4 = i32::from(*ptr3.add(0).cast::<u8>());
            match l4 {
              0 => {
                let e = ();
                Ok(e)
              }
              1 => {
                let e = {
                  let l5 = i32::from(*ptr3.add(1).cast::<u8>());

                  ErrorCode::_lift(l5 as u8)
                };
                Err(e)
              }
              _ => _rt::invalid_enum_discriminant(),
            }
          }
        }
      }
      impl Descriptor {
        #[allow(unused_unsafe, clippy::all)]
        /// Open a file or directory.
        ///
        /// The returned descriptor is not guaranteed to be the lowest-numbered
        /// descriptor not currently open/ it is randomized to prevent applications
        /// from depending on making assumptions about indexes, since this is
        /// error-prone in multi-threaded contexts. The returned descriptor is
        /// guaranteed to be less than 2**31.
        ///
        /// If `flags` contains `descriptor-flags::mutate-directory`, and the base
        /// descriptor doesn't have `descriptor-flags::mutate-directory` set,
        /// `open-at` fails with `error-code::read-only`.
        ///
        /// If `flags` contains `write` or `mutate-directory`, or `open-flags`
        /// contains `truncate` or `create`, and the base descriptor doesn't have
        /// `descriptor-flags::mutate-directory` set, `open-at` fails with
        /// `error-code::read-only`.
        ///
        /// Note: This is similar to `openat` in POSIX.
        pub fn open_at(&self,path_flags: PathFlags,path: &str,open_flags: OpenFlags,flags: DescriptorFlags,) -> Result<Descriptor,ErrorCode>{
          unsafe {
            #[repr(align(4))]
            struct RetArea([::core::mem::MaybeUninit::<u8>; 8]);
            let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
            let flags0 = path_flags;
            let vec1 = path;
            let ptr1 = vec1.as_ptr().cast::<u8>();
            let len1 = vec1.len();
            let flags2 = open_flags;
            let flags3 = flags;
            let ptr4 = ret_area.0.as_mut_ptr().cast::<u8>();
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "wasi:filesystem/types@0.2.1")]
            extern "C" {
              #[link_name = "[method]descriptor.open-at"]
              fn wit_import(_: i32, _: i32, _: *mut u8, _: usize, _: i32, _: i32, _: *mut u8, );
            }

            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: i32, _: *mut u8, _: usize, _: i32, _: i32, _: *mut u8, ){ unreachable!() }
            wit_import((self).handle() as i32, (flags0.bits() >> 0) as i32, ptr1.cast_mut(), len1, (flags2.bits() >> 0) as i32, (flags3.bits() >> 0) as i32, ptr4);
            let l5 = i32::from(*ptr4.add(0).cast::<u8>());
            match l5 {
              0 => {
                let e = {
                  let l6 = *ptr4.add(4).cast::<i32>();

                  Descriptor::from_handle(l6 as u32)
                };
                Ok(e)
              }
              1 => {
                let e = {
                  let l7 = i32::from(*ptr4.add(4).cast::<u8>());

                  ErrorCode::_lift(l7 as u8)
                };
                Err(e)
              }
              _ => _rt::invalid_enum_discriminant(),
            }
          }
        }
      }
      impl Descriptor {
        #[allow(unused_unsafe, clippy::all)]
        /// Read the contents of a symbolic link.
        ///
        /// If the contents contain an absolute or rooted path in the underlying
        /// filesystem, this function fails with `error-code::not-permitted`.
        ///
        /// Note: This is similar to `readlinkat` in POSIX.
        pub fn readlink_at(&self,path: &str,) -> Result<_rt::String,ErrorCode>{
          unsafe {
            #[repr(align(4))]
            struct RetArea([::core::mem::MaybeUninit::<u8>; 12]);
            let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
            let vec0 = path;
            let ptr0 = vec0.as_ptr().cast::<u8>();
            let len0 = vec0.len();
            let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "wasi:filesystem/types@0.2.1")]
            extern "C" {
              #[link_name = "[method]descriptor.readlink-at"]
              fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8, );
            }

            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8, ){ unreachable!() }
            wit_import((self).handle() as i32, ptr0.cast_mut(), len0, ptr1);
            let l2 = i32::from(*ptr1.add(0).cast::<u8>());
            match l2 {
              0 => {
                let e = {
                  let l3 = *ptr1.add(4).cast::<*mut u8>();
                  let l4 = *ptr1.add(8).cast::<usize>();
                  let len5 = l4;
                  let bytes5 = _rt::Vec::from_raw_parts(l3.cast(), len5, len5);

                  _rt::string_lift(bytes5)
                };
                Ok(e)
              }
              1 => {
                let e = {
                  let l6 = i32::from(*ptr1.add(4).cast::<u8>());

                  ErrorCode::_lift(l6 as u8)
                };
                Err(e)
              }
              _ => _rt::invalid_enum_discriminant(),
            }
          }
        }
      }
      impl Descriptor {
        #[allow(unused_unsafe, clippy::all)]
        /// Remove a directory.
        ///
        /// Return `error-code::not-empty` if the directory is not empty.
        ///
        /// Note: This is similar to `unlinkat(fd, path, AT_REMOVEDIR)` in POSIX.
        pub fn remove_directory_at(&self,path: &str,) -> Result<(),ErrorCode>{
          unsafe {
            #[repr(align(1))]
            struct RetArea([::core::mem::MaybeUninit::<u8>; 2]);
            let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 2]);
            let vec0 = path;
            let ptr0 = vec0.as_ptr().cast::<u8>();
            let len0 = vec0.len();
            let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "wasi:filesystem/types@0.2.1")]
            extern "C" {
              #[link_name = "[method]descriptor.remove-directory-at"]
              fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8, );
            }

            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8, ){ unreachable!() }
            wit_import((self).handle() as i32, ptr0.cast_mut(), len0, ptr1);
            let l2 = i32::from(*ptr1.add(0).cast::<u8>());
            match l2 {
              0 => {
                let e = ();
                Ok(e)
              }
              1 => {
                let e = {
                  let l3 = i32::from(*ptr1.add(1).cast::<u8>());

                  ErrorCode::_lift(l3 as u8)
                };
                Err(e)
              }
              _ => _rt::invalid_enum_discriminant(),
            }
          }
        }
      }
      impl Descriptor {
        #[allow(unused_unsafe, clippy::all)]
        /// Rename a filesystem object.
        ///
        /// Note: This is similar to `renameat` in POSIX.
        pub fn rename_at(&self,old_path: &str,new_descriptor: &Descriptor,new_path: &str,) -> Result<(),ErrorCode>{
          unsafe {
            #[repr(align(1))]
            struct RetArea([::core::mem::MaybeUninit::<u8>; 2]);
            let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 2]);
            let vec0 = old_path;
            let ptr0 = vec0.as_ptr().cast::<u8>();
            let len0 = vec0.len();
            let vec1 = new_path;
            let ptr1 = vec1.as_ptr().cast::<u8>();
            let len1 = vec1.len();
            let ptr2 = ret_area.0.as_mut_ptr().cast::<u8>();
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "wasi:filesystem/types@0.2.1")]
            extern "C" {
              #[link_name = "[method]descriptor.rename-at"]
              fn wit_import(_: i32, _: *mut u8, _: usize, _: i32, _: *mut u8, _: usize, _: *mut u8, );
            }

            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: *mut u8, _: usize, _: i32, _: *mut u8, _: usize, _: *mut u8, ){ unreachable!() }
            wit_import((self).handle() as i32, ptr0.cast_mut(), len0, (new_descriptor).handle() as i32, ptr1.cast_mut(), len1, ptr2);
            let l3 = i32::from(*ptr2.add(0).cast::<u8>());
            match l3 {
              0 => {
                let e = ();
                Ok(e)
              }
              1 => {
                let e = {
                  let l4 = i32::from(*ptr2.add(1).cast::<u8>());

                  ErrorCode::_lift(l4 as u8)
                };
                Err(e)
              }
              _ => _rt::invalid_enum_discriminant(),
            }
          }
        }
      }
      impl Descriptor {
        #[allow(unused_unsafe, clippy::all)]
        /// Create a symbolic link (also known as a "symlink").
        ///
        /// If `old-path` starts with `/`, the function fails with
        /// `error-code::not-permitted`.
        ///
        /// Note: This is similar to `symlinkat` in POSIX.
        pub fn symlink_at(&self,old_path: &str,new_path: &str,) -> Result<(),ErrorCode>{
          unsafe {
            #[repr(align(1))]
            struct RetArea([::core::mem::MaybeUninit::<u8>; 2]);
            let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 2]);
            let vec0 = old_path;
            let ptr0 = vec0.as_ptr().cast::<u8>();
            let len0 = vec0.len();
            let vec1 = new_path;
            let ptr1 = vec1.as_ptr().cast::<u8>();
            let len1 = vec1.len();
            let ptr2 = ret_area.0.as_mut_ptr().cast::<u8>();
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "wasi:filesystem/types@0.2.1")]
            extern "C" {
              #[link_name = "[method]descriptor.symlink-at"]
              fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8, _: usize, _: *mut u8, );
            }

            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8, _: usize, _: *mut u8, ){ unreachable!() }
            wit_import((self).handle() as i32, ptr0.cast_mut(), len0, ptr1.cast_mut(), len1, ptr2);
            let l3 = i32::from(*ptr2.add(0).cast::<u8>());
            match l3 {
              0 => {
                let e = ();
                Ok(e)
              }
              1 => {
                let e = {
                  let l4 = i32::from(*ptr2.add(1).cast::<u8>());

                  ErrorCode::_lift(l4 as u8)
                };
                Err(e)
              }
              _ => _rt::invalid_enum_discriminant(),
            }
          }
        }
      }
      impl Descriptor {
        #[allow(unused_unsafe, clippy::all)]
        /// Unlink a filesystem object that is not a directory.
        ///
        /// Return `error-code::is-directory` if the path refers to a directory.
        /// Note: This is similar to `unlinkat(fd, path, 0)` in POSIX.
        pub fn unlink_file_at(&self,path: &str,) -> Result<(),ErrorCode>{
          unsafe {
            #[repr(align(1))]
            struct RetArea([::core::mem::MaybeUninit::<u8>; 2]);
            let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 2]);
            let vec0 = path;
            let ptr0 = vec0.as_ptr().cast::<u8>();
            let len0 = vec0.len();
            let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "wasi:filesystem/types@0.2.1")]
            extern "C" {
              #[link_name = "[method]descriptor.unlink-file-at"]
              fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8, );
            }

            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8, ){ unreachable!() }
            wit_import((self).handle() as i32, ptr0.cast_mut(), len0, ptr1);
            let l2 = i32::from(*ptr1.add(0).cast::<u8>());
            match l2 {
              0 => {
                let e = ();
                Ok(e)
              }
              1 => {
                let e = {
                  let l3 = i32::from(*ptr1.add(1).cast::<u8>());

                  ErrorCode::_lift(l3 as u8)
                };
                Err(e)
              }
              _ => _rt::invalid_enum_discriminant(),
            }
          }
        }
      }
      impl Descriptor {
        #[allow(unused_unsafe, clippy::all)]
        /// Test whether two descriptors refer to the same filesystem object.
        ///
        /// In POSIX, this corresponds to testing whether the two descriptors have the
        /// same device (`st_dev`) and inode (`st_ino` or `d_ino`) numbers.
        /// wasi-filesystem does not expose device and inode numbers, so this function
        /// may be used instead.
        pub fn is_same_object(&self,other: &Descriptor,) -> bool{
          unsafe {

            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "wasi:filesystem/types@0.2.1")]
            extern "C" {
              #[link_name = "[method]descriptor.is-same-object"]
              fn wit_import(_: i32, _: i32, ) -> i32;
            }

            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: i32, ) -> i32{ unreachable!() }
            let ret = wit_import((self).handle() as i32, (other).handle() as i32);
            _rt::bool_lift(ret as u8)
          }
        }
      }
      impl Descriptor {
        #[allow(unused_unsafe, clippy::all)]
        /// Return a hash of the metadata associated with a filesystem object referred
        /// to by a descriptor.
        ///
        /// This returns a hash of the last-modification timestamp and file size, and
        /// may also include the inode number, device number, birth timestamp, and
        /// other metadata fields that may change when the file is modified or
        /// replaced. It may also include a secret value chosen by the
        /// implementation and not otherwise exposed.
        ///
        /// Implementations are encourated to provide the following properties:
        ///
        /// - If the file is not modified or replaced, the computed hash value should
        /// usually not change.
        /// - If the object is modified or replaced, the computed hash value should
        /// usually change.
        /// - The inputs to the hash should not be easily computable from the
        /// computed hash.
        ///
        /// However, none of these is required.
        pub fn metadata_hash(&self,) -> Result<MetadataHashValue,ErrorCode>{
          unsafe {
            #[repr(align(8))]
            struct RetArea([::core::mem::MaybeUninit::<u8>; 24]);
            let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 24]);
            let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "wasi:filesystem/types@0.2.1")]
            extern "C" {
              #[link_name = "[method]descriptor.metadata-hash"]
              fn wit_import(_: i32, _: *mut u8, );
            }

            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: *mut u8, ){ unreachable!() }
            wit_import((self).handle() as i32, ptr0);
            let l1 = i32::from(*ptr0.add(0).cast::<u8>());
            match l1 {
              0 => {
                let e = {
                  let l2 = *ptr0.add(8).cast::<i64>();
                  let l3 = *ptr0.add(16).cast::<i64>();

                  MetadataHashValue{
                    lower: l2 as u64,
                    upper: l3 as u64,
                  }
                };
                Ok(e)
              }
              1 => {
                let e = {
                  let l4 = i32::from(*ptr0.add(8).cast::<u8>());

                  ErrorCode::_lift(l4 as u8)
                };
                Err(e)
              }
              _ => _rt::invalid_enum_discriminant(),
            }
          }
        }
      }
      impl Descriptor {
        #[allow(unused_unsafe, clippy::all)]
        /// Return a hash of the metadata associated with a filesystem object referred
        /// to by a directory descriptor and a relative path.
        ///
        /// This performs the same hash computation as `metadata-hash`.
        pub fn metadata_hash_at(&self,path_flags: PathFlags,path: &str,) -> Result<MetadataHashValue,ErrorCode>{
          unsafe {
            #[repr(align(8))]
            struct RetArea([::core::mem::MaybeUninit::<u8>; 24]);
            let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 24]);
            let flags0 = path_flags;
            let vec1 = path;
            let ptr1 = vec1.as_ptr().cast::<u8>();
            let len1 = vec1.len();
            let ptr2 = ret_area.0.as_mut_ptr().cast::<u8>();
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "wasi:filesystem/types@0.2.1")]
            extern "C" {
              #[link_name = "[method]descriptor.metadata-hash-at"]
              fn wit_import(_: i32, _: i32, _: *mut u8, _: usize, _: *mut u8, );
            }

            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: i32, _: *mut u8, _: usize, _: *mut u8, ){ unreachable!() }
            wit_import((self).handle() as i32, (flags0.bits() >> 0) as i32, ptr1.cast_mut(), len1, ptr2);
            let l3 = i32::from(*ptr2.add(0).cast::<u8>());
            match l3 {
              0 => {
                let e = {
                  let l4 = *ptr2.add(8).cast::<i64>();
                  let l5 = *ptr2.add(16).cast::<i64>();

                  MetadataHashValue{
                    lower: l4 as u64,
                    upper: l5 as u64,
                  }
                };
                Ok(e)
              }
              1 => {
                let e = {
                  let l6 = i32::from(*ptr2.add(8).cast::<u8>());

                  ErrorCode::_lift(l6 as u8)
                };
                Err(e)
              }
              _ => _rt::invalid_enum_discriminant(),
            }
          }
        }
      }
      impl DirectoryEntryStream {
        #[allow(unused_unsafe, clippy::all)]
        /// Read a single directory entry from a `directory-entry-stream`.
        pub fn read_directory_entry(&self,) -> Result<Option<DirectoryEntry>,ErrorCode>{
          unsafe {
            #[repr(align(4))]
            struct RetArea([::core::mem::MaybeUninit::<u8>; 20]);
            let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 20]);
            let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "wasi:filesystem/types@0.2.1")]
            extern "C" {
              #[link_name = "[method]directory-entry-stream.read-directory-entry"]
              fn wit_import(_: i32, _: *mut u8, );
            }

            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: *mut u8, ){ unreachable!() }
            wit_import((self).handle() as i32, ptr0);
            let l1 = i32::from(*ptr0.add(0).cast::<u8>());
            match l1 {
              0 => {
                let e = {
                  let l2 = i32::from(*ptr0.add(4).cast::<u8>());

                  match l2 {
                    0 => None,
                    1 => {
                      let e = {
                        let l3 = i32::from(*ptr0.add(8).cast::<u8>());
                        let l4 = *ptr0.add(12).cast::<*mut u8>();
                        let l5 = *ptr0.add(16).cast::<usize>();
                        let len6 = l5;
                        let bytes6 = _rt::Vec::from_raw_parts(l4.cast(), len6, len6);

                        DirectoryEntry{
                          type_: DescriptorType::_lift(l3 as u8),
                          name: _rt::string_lift(bytes6),
                        }
                      };
                      Some(e)
                    }
                    _ => _rt::invalid_enum_discriminant(),
                  }
                };
                Ok(e)
              }
              1 => {
                let e = {
                  let l7 = i32::from(*ptr0.add(4).cast::<u8>());

                  ErrorCode::_lift(l7 as u8)
                };
                Err(e)
              }
              _ => _rt::invalid_enum_discriminant(),
            }
          }
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      /// Attempts to extract a filesystem-related `error-code` from the stream
      /// `error` provided.
      ///
      /// Stream operations which return `stream-error::last-operation-failed`
      /// have a payload with more information about the operation that failed.
      /// This payload can be passed through to this function to see if there's
      /// filesystem-related information about the error to return.
      ///
      /// Note that this function is fallible because not all stream-related
      /// errors are filesystem-related errors.
      pub fn filesystem_error_code(err: &Error,) -> Option<ErrorCode>{
        unsafe {
          #[repr(align(1))]
          struct RetArea([::core::mem::MaybeUninit::<u8>; 2]);
          let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 2]);
          let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "wasi:filesystem/types@0.2.1")]
          extern "C" {
            #[link_name = "filesystem-error-code"]
            fn wit_import(_: i32, _: *mut u8, );
          }

          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, _: *mut u8, ){ unreachable!() }
          wit_import((err).handle() as i32, ptr0);
          let l1 = i32::from(*ptr0.add(0).cast::<u8>());
          match l1 {
            0 => None,
            1 => {
              let e = {
                let l2 = i32::from(*ptr0.add(1).cast::<u8>());

                ErrorCode::_lift(l2 as u8)
              };
              Some(e)
            }
            _ => _rt::invalid_enum_discriminant(),
          }
        }
      }

    }

    #[allow(dead_code, clippy::all)]
    pub mod preopens {
      #[used]
      #[doc(hidden)]
      static __FORCE_SECTION_REF: fn() =
      super::super::super::__link_custom_section_describing_imports;
      
      use super::super::super::_rt;
      pub type Descriptor = super::super::super::wasi::filesystem::types::Descriptor;
      #[allow(unused_unsafe, clippy::all)]
      /// Return the set of preopened directories, and their path.
      pub fn get_directories() -> _rt::Vec::<(Descriptor,_rt::String,)>{
        unsafe {
          #[repr(align(4))]
          struct RetArea([::core::mem::MaybeUninit::<u8>; 8]);
          let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
          let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "wasi:filesystem/preopens@0.2.1")]
          extern "C" {
            #[link_name = "get-directories"]
            fn wit_import(_: *mut u8, );
          }

          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: *mut u8, ){ unreachable!() }
          wit_import(ptr0);
          let l1 = *ptr0.add(0).cast::<*mut u8>();
          let l2 = *ptr0.add(4).cast::<usize>();
          let base7 = l1;
          let len7 = l2;
          let mut result7 = _rt::Vec::with_capacity(len7);
          for i in 0..len7 {
            let base = base7.add(i * 12);
            let e7 = {
              let l3 = *base.add(0).cast::<i32>();
              let l4 = *base.add(4).cast::<*mut u8>();
              let l5 = *base.add(8).cast::<usize>();
              let len6 = l5;
              let bytes6 = _rt::Vec::from_raw_parts(l4.cast(), len6, len6);

              (super::super::super::wasi::filesystem::types::Descriptor::from_handle(l3 as u32), _rt::string_lift(bytes6))
            };
            result7.push(e7);
          }
          _rt::cabi_dealloc(base7, len7 * 12, 4);
          result7
        }
      }

    }

  }
  #[allow(dead_code)]
  pub mod io {
    #[allow(dead_code, clippy::all)]
    pub mod poll {
      #[used]
      #[doc(hidden)]
      static __FORCE_SECTION_REF: fn() =
      super::super::super::__link_custom_section_describing_imports;
      
      use super::super::super::_rt;
      /// `pollable` represents a single I/O event which may be ready, or not.

      #[derive(Debug)]
      #[repr(transparent)]
      pub struct Pollable{
        handle: _rt::Resource<Pollable>,
      }

      impl Pollable{
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
          Self {
            handle: _rt::Resource::from_handle(handle),
          }
        }

        #[doc(hidden)]
        pub fn take_handle(&self) -> u32 {
          _rt::Resource::take_handle(&self.handle)
        }

        #[doc(hidden)]
        pub fn handle(&self) -> u32 {
          _rt::Resource::handle(&self.handle)
        }
      }


      unsafe impl _rt::WasmResource for Pollable{
        #[inline]
        unsafe fn drop(_handle: u32) {
          #[cfg(not(target_arch = "wasm32"))]
          unreachable!();

          #[cfg(target_arch = "wasm32")]
          {
            #[link(wasm_import_module = "wasi:io/poll@0.2.1")]
            extern "C" {
              #[link_name = "[resource-drop]pollable"]
              fn drop(_: u32);
            }

            drop(_handle);
          }
        }
      }

      impl Pollable {
        #[allow(unused_unsafe, clippy::all)]
        /// Return the readiness of a pollable. This function never blocks.
        ///
        /// Returns `true` when the pollable is ready, and `false` otherwise.
        pub fn ready(&self,) -> bool{
          unsafe {

            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "wasi:io/poll@0.2.1")]
            extern "C" {
              #[link_name = "[method]pollable.ready"]
              fn wit_import(_: i32, ) -> i32;
            }

            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, ) -> i32{ unreachable!() }
            let ret = wit_import((self).handle() as i32);
            _rt::bool_lift(ret as u8)
          }
        }
      }
      impl Pollable {
        #[allow(unused_unsafe, clippy::all)]
        /// `block` returns immediately if the pollable is ready, and otherwise
        /// blocks until ready.
        ///
        /// This function is equivalent to calling `poll.poll` on a list
        /// containing only this pollable.
        pub fn block(&self,){
          unsafe {

            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "wasi:io/poll@0.2.1")]
            extern "C" {
              #[link_name = "[method]pollable.block"]
              fn wit_import(_: i32, );
            }

            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, ){ unreachable!() }
            wit_import((self).handle() as i32);
          }
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      /// Poll for completion on a set of pollables.
      ///
      /// This function takes a list of pollables, which identify I/O sources of
      /// interest, and waits until one or more of the events is ready for I/O.
      ///
      /// The result `list<u32>` contains one or more indices of handles in the
      /// argument list that is ready for I/O.
      ///
      /// This function traps if either:
      /// - the list is empty, or:
      /// - the list contains more elements than can be indexed with a `u32` value.
      ///
      /// A timeout can be implemented by adding a pollable from the
      /// wasi-clocks API to the list.
      ///
      /// This function does not return a `result`; polling in itself does not
      /// do any I/O so it doesn't fail. If any of the I/O sources identified by
      /// the pollables has an error, it is indicated by marking the source as
      /// being ready for I/O.
      pub fn poll(in_: &[&Pollable],) -> _rt::Vec::<u32>{
        unsafe {
          #[repr(align(4))]
          struct RetArea([::core::mem::MaybeUninit::<u8>; 8]);
          let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
          let vec0 = in_;
          let len0 = vec0.len();
          let layout0 = _rt::alloc::Layout::from_size_align_unchecked(vec0.len() * 4, 4);
          let result0 = if layout0.size() != 0 {
            let ptr = _rt::alloc::alloc(layout0).cast::<u8>();
            if ptr.is_null()
            {
              _rt::alloc::handle_alloc_error(layout0);
            }
            ptr
          }else {
            ::core::ptr::null_mut()
          };
          for (i, e) in vec0.into_iter().enumerate() {
            let base = result0.add(i * 4);
            {
              *base.add(0).cast::<i32>() = (e).handle() as i32;
            }
          }
          let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "wasi:io/poll@0.2.1")]
          extern "C" {
            #[link_name = "poll"]
            fn wit_import(_: *mut u8, _: usize, _: *mut u8, );
          }

          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: *mut u8, _: usize, _: *mut u8, ){ unreachable!() }
          wit_import(result0, len0, ptr1);
          let l2 = *ptr1.add(0).cast::<*mut u8>();
          let l3 = *ptr1.add(4).cast::<usize>();
          let len4 = l3;
          if layout0.size() != 0 {
            _rt::alloc::dealloc(result0.cast(), layout0);
          }
          _rt::Vec::from_raw_parts(l2.cast(), len4, len4)
        }
      }

    }

    #[allow(dead_code, clippy::all)]
    pub mod error {
      #[used]
      #[doc(hidden)]
      static __FORCE_SECTION_REF: fn() =
      super::super::super::__link_custom_section_describing_imports;
      
      use super::super::super::_rt;
      /// A resource which represents some error information.
      ///
      /// The only method provided by this resource is `to-debug-string`,
      /// which provides some human-readable information about the error.
      ///
      /// In the `wasi:io` package, this resource is returned through the
      /// `wasi:io/streams/stream-error` type.
      ///
      /// To provide more specific error information, other interfaces may
      /// offer functions to "downcast" this error into more specific types. For example,
      /// errors returned from streams derived from filesystem types can be described using
      /// the filesystem's own error-code type. This is done using the function
      /// `wasi:filesystem/types/filesystem-error-code`, which takes a `borrow<error>`
      /// parameter and returns an `option<wasi:filesystem/types/error-code>`.
      ///
      /// The set of functions which can "downcast" an `error` into a more
      /// concrete type is open.

      #[derive(Debug)]
      #[repr(transparent)]
      pub struct Error{
        handle: _rt::Resource<Error>,
      }

      impl Error{
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
          Self {
            handle: _rt::Resource::from_handle(handle),
          }
        }

        #[doc(hidden)]
        pub fn take_handle(&self) -> u32 {
          _rt::Resource::take_handle(&self.handle)
        }

        #[doc(hidden)]
        pub fn handle(&self) -> u32 {
          _rt::Resource::handle(&self.handle)
        }
      }


      unsafe impl _rt::WasmResource for Error{
        #[inline]
        unsafe fn drop(_handle: u32) {
          #[cfg(not(target_arch = "wasm32"))]
          unreachable!();

          #[cfg(target_arch = "wasm32")]
          {
            #[link(wasm_import_module = "wasi:io/error@0.2.1")]
            extern "C" {
              #[link_name = "[resource-drop]error"]
              fn drop(_: u32);
            }

            drop(_handle);
          }
        }
      }

      impl Error {
        #[allow(unused_unsafe, clippy::all)]
        /// Returns a string that is suitable to assist humans in debugging
        /// this error.
        ///
        /// WARNING: The returned string should not be consumed mechanically!
        /// It may change across platforms, hosts, or other implementation
        /// details. Parsing this string is a major platform-compatibility
        /// hazard.
        pub fn to_debug_string(&self,) -> _rt::String{
          unsafe {
            #[repr(align(4))]
            struct RetArea([::core::mem::MaybeUninit::<u8>; 8]);
            let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
            let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "wasi:io/error@0.2.1")]
            extern "C" {
              #[link_name = "[method]error.to-debug-string"]
              fn wit_import(_: i32, _: *mut u8, );
            }

            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: *mut u8, ){ unreachable!() }
            wit_import((self).handle() as i32, ptr0);
            let l1 = *ptr0.add(0).cast::<*mut u8>();
            let l2 = *ptr0.add(4).cast::<usize>();
            let len3 = l2;
            let bytes3 = _rt::Vec::from_raw_parts(l1.cast(), len3, len3);
            _rt::string_lift(bytes3)
          }
        }
      }

    }

    #[allow(dead_code, clippy::all)]
    pub mod streams {
      #[used]
      #[doc(hidden)]
      static __FORCE_SECTION_REF: fn() =
      super::super::super::__link_custom_section_describing_imports;
      
      use super::super::super::_rt;
      pub type Error = super::super::super::wasi::io::error::Error;
      pub type Pollable = super::super::super::wasi::io::poll::Pollable;
      /// An error for input-stream and output-stream operations.
      pub enum StreamError {
        /// The last operation (a write or flush) failed before completion.
        ///
        /// More information is available in the `error` payload.
        LastOperationFailed(Error),
        /// The stream is closed: no more input will be accepted by the
        /// stream. A closed output-stream will return this error on all
        /// future operations.
        Closed,
      }
      impl ::core::fmt::Debug for StreamError {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          match self {
            StreamError::LastOperationFailed(e) => {
              f.debug_tuple("StreamError::LastOperationFailed").field(e).finish()
            }
            StreamError::Closed => {
              f.debug_tuple("StreamError::Closed").finish()
            }
          }
        }
      }
      impl ::core::fmt::Display for StreamError {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          write!(f, "{:?}", self)
        }
      }

      impl std::error::Error for StreamError {}
      /// An input bytestream.
      ///
      /// `input-stream`s are *non-blocking* to the extent practical on underlying
      /// platforms. I/O operations always return promptly; if fewer bytes are
      /// promptly available than requested, they return the number of bytes promptly
      /// available, which could even be zero. To wait for data to be available,
      /// use the `subscribe` function to obtain a `pollable` which can be polled
      /// for using `wasi:io/poll`.

      #[derive(Debug)]
      #[repr(transparent)]
      pub struct InputStream{
        handle: _rt::Resource<InputStream>,
      }

      impl InputStream{
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
          Self {
            handle: _rt::Resource::from_handle(handle),
          }
        }

        #[doc(hidden)]
        pub fn take_handle(&self) -> u32 {
          _rt::Resource::take_handle(&self.handle)
        }

        #[doc(hidden)]
        pub fn handle(&self) -> u32 {
          _rt::Resource::handle(&self.handle)
        }
      }


      unsafe impl _rt::WasmResource for InputStream{
        #[inline]
        unsafe fn drop(_handle: u32) {
          #[cfg(not(target_arch = "wasm32"))]
          unreachable!();

          #[cfg(target_arch = "wasm32")]
          {
            #[link(wasm_import_module = "wasi:io/streams@0.2.1")]
            extern "C" {
              #[link_name = "[resource-drop]input-stream"]
              fn drop(_: u32);
            }

            drop(_handle);
          }
        }
      }

      /// An output bytestream.
      ///
      /// `output-stream`s are *non-blocking* to the extent practical on
      /// underlying platforms. Except where specified otherwise, I/O operations also
      /// always return promptly, after the number of bytes that can be written
      /// promptly, which could even be zero. To wait for the stream to be ready to
      /// accept data, the `subscribe` function to obtain a `pollable` which can be
      /// polled for using `wasi:io/poll`.
      ///
      /// Dropping an `output-stream` while there's still an active write in
      /// progress may result in the data being lost. Before dropping the stream,
      /// be sure to fully flush your writes.

      #[derive(Debug)]
      #[repr(transparent)]
      pub struct OutputStream{
        handle: _rt::Resource<OutputStream>,
      }

      impl OutputStream{
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
          Self {
            handle: _rt::Resource::from_handle(handle),
          }
        }

        #[doc(hidden)]
        pub fn take_handle(&self) -> u32 {
          _rt::Resource::take_handle(&self.handle)
        }

        #[doc(hidden)]
        pub fn handle(&self) -> u32 {
          _rt::Resource::handle(&self.handle)
        }
      }


      unsafe impl _rt::WasmResource for OutputStream{
        #[inline]
        unsafe fn drop(_handle: u32) {
          #[cfg(not(target_arch = "wasm32"))]
          unreachable!();

          #[cfg(target_arch = "wasm32")]
          {
            #[link(wasm_import_module = "wasi:io/streams@0.2.1")]
            extern "C" {
              #[link_name = "[resource-drop]output-stream"]
              fn drop(_: u32);
            }

            drop(_handle);
          }
        }
      }

      impl InputStream {
        #[allow(unused_unsafe, clippy::all)]
        /// Perform a non-blocking read from the stream.
        ///
        /// When the source of a `read` is binary data, the bytes from the source
        /// are returned verbatim. When the source of a `read` is known to the
        /// implementation to be text, bytes containing the UTF-8 encoding of the
        /// text are returned.
        ///
        /// This function returns a list of bytes containing the read data,
        /// when successful. The returned list will contain up to `len` bytes;
        /// it may return fewer than requested, but not more. The list is
        /// empty when no bytes are available for reading at this time. The
        /// pollable given by `subscribe` will be ready when more bytes are
        /// available.
        ///
        /// This function fails with a `stream-error` when the operation
        /// encounters an error, giving `last-operation-failed`, or when the
        /// stream is closed, giving `closed`.
        ///
        /// When the caller gives a `len` of 0, it represents a request to
        /// read 0 bytes. If the stream is still open, this call should
        /// succeed and return an empty list, or otherwise fail with `closed`.
        ///
        /// The `len` parameter is a `u64`, which could represent a list of u8 which
        /// is not possible to allocate in wasm32, or not desirable to allocate as
        /// as a return value by the callee. The callee may return a list of bytes
        /// less than `len` in size while more bytes are available for reading.
        pub fn read(&self,len: u64,) -> Result<_rt::Vec::<u8>,StreamError>{
          unsafe {
            #[repr(align(4))]
            struct RetArea([::core::mem::MaybeUninit::<u8>; 12]);
            let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
            let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "wasi:io/streams@0.2.1")]
            extern "C" {
              #[link_name = "[method]input-stream.read"]
              fn wit_import(_: i32, _: i64, _: *mut u8, );
            }

            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: i64, _: *mut u8, ){ unreachable!() }
            wit_import((self).handle() as i32, _rt::as_i64(&len), ptr0);
            let l1 = i32::from(*ptr0.add(0).cast::<u8>());
            match l1 {
              0 => {
                let e = {
                  let l2 = *ptr0.add(4).cast::<*mut u8>();
                  let l3 = *ptr0.add(8).cast::<usize>();
                  let len4 = l3;

                  _rt::Vec::from_raw_parts(l2.cast(), len4, len4)
                };
                Ok(e)
              }
              1 => {
                let e = {
                  let l5 = i32::from(*ptr0.add(4).cast::<u8>());
                  let v7 = match l5 {
                    0 => {
                      let e7 = {
                        let l6 = *ptr0.add(8).cast::<i32>();

                        super::super::super::wasi::io::error::Error::from_handle(l6 as u32)
                      };
                      StreamError::LastOperationFailed(e7)
                    }
                    n => {
                      debug_assert_eq!(n, 1, "invalid enum discriminant");
                      StreamError::Closed
                    }
                  };

                  v7
                };
                Err(e)
              }
              _ => _rt::invalid_enum_discriminant(),
            }
          }
        }
      }
      impl InputStream {
        #[allow(unused_unsafe, clippy::all)]
        /// Read bytes from a stream, after blocking until at least one byte can
        /// be read. Except for blocking, behavior is identical to `read`.
        pub fn blocking_read(&self,len: u64,) -> Result<_rt::Vec::<u8>,StreamError>{
          unsafe {
            #[repr(align(4))]
            struct RetArea([::core::mem::MaybeUninit::<u8>; 12]);
            let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
            let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "wasi:io/streams@0.2.1")]
            extern "C" {
              #[link_name = "[method]input-stream.blocking-read"]
              fn wit_import(_: i32, _: i64, _: *mut u8, );
            }

            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: i64, _: *mut u8, ){ unreachable!() }
            wit_import((self).handle() as i32, _rt::as_i64(&len), ptr0);
            let l1 = i32::from(*ptr0.add(0).cast::<u8>());
            match l1 {
              0 => {
                let e = {
                  let l2 = *ptr0.add(4).cast::<*mut u8>();
                  let l3 = *ptr0.add(8).cast::<usize>();
                  let len4 = l3;

                  _rt::Vec::from_raw_parts(l2.cast(), len4, len4)
                };
                Ok(e)
              }
              1 => {
                let e = {
                  let l5 = i32::from(*ptr0.add(4).cast::<u8>());
                  let v7 = match l5 {
                    0 => {
                      let e7 = {
                        let l6 = *ptr0.add(8).cast::<i32>();

                        super::super::super::wasi::io::error::Error::from_handle(l6 as u32)
                      };
                      StreamError::LastOperationFailed(e7)
                    }
                    n => {
                      debug_assert_eq!(n, 1, "invalid enum discriminant");
                      StreamError::Closed
                    }
                  };

                  v7
                };
                Err(e)
              }
              _ => _rt::invalid_enum_discriminant(),
            }
          }
        }
      }
      impl InputStream {
        #[allow(unused_unsafe, clippy::all)]
        /// Skip bytes from a stream. Returns number of bytes skipped.
        ///
        /// Behaves identical to `read`, except instead of returning a list
        /// of bytes, returns the number of bytes consumed from the stream.
        pub fn skip(&self,len: u64,) -> Result<u64,StreamError>{
          unsafe {
            #[repr(align(8))]
            struct RetArea([::core::mem::MaybeUninit::<u8>; 16]);
            let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
            let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "wasi:io/streams@0.2.1")]
            extern "C" {
              #[link_name = "[method]input-stream.skip"]
              fn wit_import(_: i32, _: i64, _: *mut u8, );
            }

            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: i64, _: *mut u8, ){ unreachable!() }
            wit_import((self).handle() as i32, _rt::as_i64(&len), ptr0);
            let l1 = i32::from(*ptr0.add(0).cast::<u8>());
            match l1 {
              0 => {
                let e = {
                  let l2 = *ptr0.add(8).cast::<i64>();

                  l2 as u64
                };
                Ok(e)
              }
              1 => {
                let e = {
                  let l3 = i32::from(*ptr0.add(8).cast::<u8>());
                  let v5 = match l3 {
                    0 => {
                      let e5 = {
                        let l4 = *ptr0.add(12).cast::<i32>();

                        super::super::super::wasi::io::error::Error::from_handle(l4 as u32)
                      };
                      StreamError::LastOperationFailed(e5)
                    }
                    n => {
                      debug_assert_eq!(n, 1, "invalid enum discriminant");
                      StreamError::Closed
                    }
                  };

                  v5
                };
                Err(e)
              }
              _ => _rt::invalid_enum_discriminant(),
            }
          }
        }
      }
      impl InputStream {
        #[allow(unused_unsafe, clippy::all)]
        /// Skip bytes from a stream, after blocking until at least one byte
        /// can be skipped. Except for blocking behavior, identical to `skip`.
        pub fn blocking_skip(&self,len: u64,) -> Result<u64,StreamError>{
          unsafe {
            #[repr(align(8))]
            struct RetArea([::core::mem::MaybeUninit::<u8>; 16]);
            let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
            let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "wasi:io/streams@0.2.1")]
            extern "C" {
              #[link_name = "[method]input-stream.blocking-skip"]
              fn wit_import(_: i32, _: i64, _: *mut u8, );
            }

            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: i64, _: *mut u8, ){ unreachable!() }
            wit_import((self).handle() as i32, _rt::as_i64(&len), ptr0);
            let l1 = i32::from(*ptr0.add(0).cast::<u8>());
            match l1 {
              0 => {
                let e = {
                  let l2 = *ptr0.add(8).cast::<i64>();

                  l2 as u64
                };
                Ok(e)
              }
              1 => {
                let e = {
                  let l3 = i32::from(*ptr0.add(8).cast::<u8>());
                  let v5 = match l3 {
                    0 => {
                      let e5 = {
                        let l4 = *ptr0.add(12).cast::<i32>();

                        super::super::super::wasi::io::error::Error::from_handle(l4 as u32)
                      };
                      StreamError::LastOperationFailed(e5)
                    }
                    n => {
                      debug_assert_eq!(n, 1, "invalid enum discriminant");
                      StreamError::Closed
                    }
                  };

                  v5
                };
                Err(e)
              }
              _ => _rt::invalid_enum_discriminant(),
            }
          }
        }
      }
      impl InputStream {
        #[allow(unused_unsafe, clippy::all)]
        /// Create a `pollable` which will resolve once either the specified stream
        /// has bytes available to read or the other end of the stream has been
        /// closed.
        /// The created `pollable` is a child resource of the `input-stream`.
        /// Implementations may trap if the `input-stream` is dropped before
        /// all derived `pollable`s created with this function are dropped.
        pub fn subscribe(&self,) -> Pollable{
          unsafe {

            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "wasi:io/streams@0.2.1")]
            extern "C" {
              #[link_name = "[method]input-stream.subscribe"]
              fn wit_import(_: i32, ) -> i32;
            }

            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, ) -> i32{ unreachable!() }
            let ret = wit_import((self).handle() as i32);
            super::super::super::wasi::io::poll::Pollable::from_handle(ret as u32)
          }
        }
      }
      impl OutputStream {
        #[allow(unused_unsafe, clippy::all)]
        /// Check readiness for writing. This function never blocks.
        ///
        /// Returns the number of bytes permitted for the next call to `write`,
        /// or an error. Calling `write` with more bytes than this function has
        /// permitted will trap.
        ///
        /// When this function returns 0 bytes, the `subscribe` pollable will
        /// become ready when this function will report at least 1 byte, or an
        /// error.
        pub fn check_write(&self,) -> Result<u64,StreamError>{
          unsafe {
            #[repr(align(8))]
            struct RetArea([::core::mem::MaybeUninit::<u8>; 16]);
            let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
            let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "wasi:io/streams@0.2.1")]
            extern "C" {
              #[link_name = "[method]output-stream.check-write"]
              fn wit_import(_: i32, _: *mut u8, );
            }

            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: *mut u8, ){ unreachable!() }
            wit_import((self).handle() as i32, ptr0);
            let l1 = i32::from(*ptr0.add(0).cast::<u8>());
            match l1 {
              0 => {
                let e = {
                  let l2 = *ptr0.add(8).cast::<i64>();

                  l2 as u64
                };
                Ok(e)
              }
              1 => {
                let e = {
                  let l3 = i32::from(*ptr0.add(8).cast::<u8>());
                  let v5 = match l3 {
                    0 => {
                      let e5 = {
                        let l4 = *ptr0.add(12).cast::<i32>();

                        super::super::super::wasi::io::error::Error::from_handle(l4 as u32)
                      };
                      StreamError::LastOperationFailed(e5)
                    }
                    n => {
                      debug_assert_eq!(n, 1, "invalid enum discriminant");
                      StreamError::Closed
                    }
                  };

                  v5
                };
                Err(e)
              }
              _ => _rt::invalid_enum_discriminant(),
            }
          }
        }
      }
      impl OutputStream {
        #[allow(unused_unsafe, clippy::all)]
        /// Perform a write. This function never blocks.
        ///
        /// When the destination of a `write` is binary data, the bytes from
        /// `contents` are written verbatim. When the destination of a `write` is
        /// known to the implementation to be text, the bytes of `contents` are
        /// transcoded from UTF-8 into the encoding of the destination and then
        /// written.
        ///
        /// Precondition: check-write gave permit of Ok(n) and contents has a
        /// length of less than or equal to n. Otherwise, this function will trap.
        ///
        /// returns Err(closed) without writing if the stream has closed since
        /// the last call to check-write provided a permit.
        pub fn write(&self,contents: &[u8],) -> Result<(),StreamError>{
          unsafe {
            #[repr(align(4))]
            struct RetArea([::core::mem::MaybeUninit::<u8>; 12]);
            let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
            let vec0 = contents;
            let ptr0 = vec0.as_ptr().cast::<u8>();
            let len0 = vec0.len();
            let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "wasi:io/streams@0.2.1")]
            extern "C" {
              #[link_name = "[method]output-stream.write"]
              fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8, );
            }

            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8, ){ unreachable!() }
            wit_import((self).handle() as i32, ptr0.cast_mut(), len0, ptr1);
            let l2 = i32::from(*ptr1.add(0).cast::<u8>());
            match l2 {
              0 => {
                let e = ();
                Ok(e)
              }
              1 => {
                let e = {
                  let l3 = i32::from(*ptr1.add(4).cast::<u8>());
                  let v5 = match l3 {
                    0 => {
                      let e5 = {
                        let l4 = *ptr1.add(8).cast::<i32>();

                        super::super::super::wasi::io::error::Error::from_handle(l4 as u32)
                      };
                      StreamError::LastOperationFailed(e5)
                    }
                    n => {
                      debug_assert_eq!(n, 1, "invalid enum discriminant");
                      StreamError::Closed
                    }
                  };

                  v5
                };
                Err(e)
              }
              _ => _rt::invalid_enum_discriminant(),
            }
          }
        }
      }
      impl OutputStream {
        #[allow(unused_unsafe, clippy::all)]
        /// Perform a write of up to 4096 bytes, and then flush the stream. Block
        /// until all of these operations are complete, or an error occurs.
        ///
        /// This is a convenience wrapper around the use of `check-write`,
        /// `subscribe`, `write`, and `flush`, and is implemented with the
        /// following pseudo-code:
        ///
        /// ```text
        /// let pollable = this.subscribe();
        /// while !contents.is_empty() {
        /// // Wait for the stream to become writable
        /// pollable.block();
        /// let Ok(n) = this.check-write(); // eliding error handling
        /// let len = min(n, contents.len());
        /// let (chunk, rest) = contents.split_at(len);
        /// this.write(chunk  );            // eliding error handling
        /// contents = rest;
        /// }
        /// this.flush();
        /// // Wait for completion of `flush`
        /// pollable.block();
        /// // Check for any errors that arose during `flush`
        /// let _ = this.check-write();         // eliding error handling
        /// ```
        pub fn blocking_write_and_flush(&self,contents: &[u8],) -> Result<(),StreamError>{
          unsafe {
            #[repr(align(4))]
            struct RetArea([::core::mem::MaybeUninit::<u8>; 12]);
            let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
            let vec0 = contents;
            let ptr0 = vec0.as_ptr().cast::<u8>();
            let len0 = vec0.len();
            let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "wasi:io/streams@0.2.1")]
            extern "C" {
              #[link_name = "[method]output-stream.blocking-write-and-flush"]
              fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8, );
            }

            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8, ){ unreachable!() }
            wit_import((self).handle() as i32, ptr0.cast_mut(), len0, ptr1);
            let l2 = i32::from(*ptr1.add(0).cast::<u8>());
            match l2 {
              0 => {
                let e = ();
                Ok(e)
              }
              1 => {
                let e = {
                  let l3 = i32::from(*ptr1.add(4).cast::<u8>());
                  let v5 = match l3 {
                    0 => {
                      let e5 = {
                        let l4 = *ptr1.add(8).cast::<i32>();

                        super::super::super::wasi::io::error::Error::from_handle(l4 as u32)
                      };
                      StreamError::LastOperationFailed(e5)
                    }
                    n => {
                      debug_assert_eq!(n, 1, "invalid enum discriminant");
                      StreamError::Closed
                    }
                  };

                  v5
                };
                Err(e)
              }
              _ => _rt::invalid_enum_discriminant(),
            }
          }
        }
      }
      impl OutputStream {
        #[allow(unused_unsafe, clippy::all)]
        /// Request to flush buffered output. This function never blocks.
        ///
        /// This tells the output-stream that the caller intends any buffered
        /// output to be flushed. the output which is expected to be flushed
        /// is all that has been passed to `write` prior to this call.
        ///
        /// Upon calling this function, the `output-stream` will not accept any
        /// writes (`check-write` will return `ok(0)`) until the flush has
        /// completed. The `subscribe` pollable will become ready when the
        /// flush has completed and the stream can accept more writes.
        pub fn flush(&self,) -> Result<(),StreamError>{
          unsafe {
            #[repr(align(4))]
            struct RetArea([::core::mem::MaybeUninit::<u8>; 12]);
            let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
            let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "wasi:io/streams@0.2.1")]
            extern "C" {
              #[link_name = "[method]output-stream.flush"]
              fn wit_import(_: i32, _: *mut u8, );
            }

            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: *mut u8, ){ unreachable!() }
            wit_import((self).handle() as i32, ptr0);
            let l1 = i32::from(*ptr0.add(0).cast::<u8>());
            match l1 {
              0 => {
                let e = ();
                Ok(e)
              }
              1 => {
                let e = {
                  let l2 = i32::from(*ptr0.add(4).cast::<u8>());
                  let v4 = match l2 {
                    0 => {
                      let e4 = {
                        let l3 = *ptr0.add(8).cast::<i32>();

                        super::super::super::wasi::io::error::Error::from_handle(l3 as u32)
                      };
                      StreamError::LastOperationFailed(e4)
                    }
                    n => {
                      debug_assert_eq!(n, 1, "invalid enum discriminant");
                      StreamError::Closed
                    }
                  };

                  v4
                };
                Err(e)
              }
              _ => _rt::invalid_enum_discriminant(),
            }
          }
        }
      }
      impl OutputStream {
        #[allow(unused_unsafe, clippy::all)]
        /// Request to flush buffered output, and block until flush completes
        /// and stream is ready for writing again.
        pub fn blocking_flush(&self,) -> Result<(),StreamError>{
          unsafe {
            #[repr(align(4))]
            struct RetArea([::core::mem::MaybeUninit::<u8>; 12]);
            let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
            let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "wasi:io/streams@0.2.1")]
            extern "C" {
              #[link_name = "[method]output-stream.blocking-flush"]
              fn wit_import(_: i32, _: *mut u8, );
            }

            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: *mut u8, ){ unreachable!() }
            wit_import((self).handle() as i32, ptr0);
            let l1 = i32::from(*ptr0.add(0).cast::<u8>());
            match l1 {
              0 => {
                let e = ();
                Ok(e)
              }
              1 => {
                let e = {
                  let l2 = i32::from(*ptr0.add(4).cast::<u8>());
                  let v4 = match l2 {
                    0 => {
                      let e4 = {
                        let l3 = *ptr0.add(8).cast::<i32>();

                        super::super::super::wasi::io::error::Error::from_handle(l3 as u32)
                      };
                      StreamError::LastOperationFailed(e4)
                    }
                    n => {
                      debug_assert_eq!(n, 1, "invalid enum discriminant");
                      StreamError::Closed
                    }
                  };

                  v4
                };
                Err(e)
              }
              _ => _rt::invalid_enum_discriminant(),
            }
          }
        }
      }
      impl OutputStream {
        #[allow(unused_unsafe, clippy::all)]
        /// Create a `pollable` which will resolve once the output-stream
        /// is ready for more writing, or an error has occurred. When this
        /// pollable is ready, `check-write` will return `ok(n)` with n>0, or an
        /// error.
        ///
        /// If the stream is closed, this pollable is always ready immediately.
        ///
        /// The created `pollable` is a child resource of the `output-stream`.
        /// Implementations may trap if the `output-stream` is dropped before
        /// all derived `pollable`s created with this function are dropped.
        pub fn subscribe(&self,) -> Pollable{
          unsafe {

            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "wasi:io/streams@0.2.1")]
            extern "C" {
              #[link_name = "[method]output-stream.subscribe"]
              fn wit_import(_: i32, ) -> i32;
            }

            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, ) -> i32{ unreachable!() }
            let ret = wit_import((self).handle() as i32);
            super::super::super::wasi::io::poll::Pollable::from_handle(ret as u32)
          }
        }
      }
      impl OutputStream {
        #[allow(unused_unsafe, clippy::all)]
        /// Write zeroes to a stream.
        ///
        /// This should be used precisely like `write` with the exact same
        /// preconditions (must use check-write first), but instead of
        /// passing a list of bytes, you simply pass the number of zero-bytes
        /// that should be written.
        pub fn write_zeroes(&self,len: u64,) -> Result<(),StreamError>{
          unsafe {
            #[repr(align(4))]
            struct RetArea([::core::mem::MaybeUninit::<u8>; 12]);
            let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
            let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "wasi:io/streams@0.2.1")]
            extern "C" {
              #[link_name = "[method]output-stream.write-zeroes"]
              fn wit_import(_: i32, _: i64, _: *mut u8, );
            }

            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: i64, _: *mut u8, ){ unreachable!() }
            wit_import((self).handle() as i32, _rt::as_i64(&len), ptr0);
            let l1 = i32::from(*ptr0.add(0).cast::<u8>());
            match l1 {
              0 => {
                let e = ();
                Ok(e)
              }
              1 => {
                let e = {
                  let l2 = i32::from(*ptr0.add(4).cast::<u8>());
                  let v4 = match l2 {
                    0 => {
                      let e4 = {
                        let l3 = *ptr0.add(8).cast::<i32>();

                        super::super::super::wasi::io::error::Error::from_handle(l3 as u32)
                      };
                      StreamError::LastOperationFailed(e4)
                    }
                    n => {
                      debug_assert_eq!(n, 1, "invalid enum discriminant");
                      StreamError::Closed
                    }
                  };

                  v4
                };
                Err(e)
              }
              _ => _rt::invalid_enum_discriminant(),
            }
          }
        }
      }
      impl OutputStream {
        #[allow(unused_unsafe, clippy::all)]
        /// Perform a write of up to 4096 zeroes, and then flush the stream.
        /// Block until all of these operations are complete, or an error
        /// occurs.
        ///
        /// This is a convenience wrapper around the use of `check-write`,
        /// `subscribe`, `write-zeroes`, and `flush`, and is implemented with
        /// the following pseudo-code:
        ///
        /// ```text
        /// let pollable = this.subscribe();
        /// while num_zeroes != 0 {
        /// // Wait for the stream to become writable
        /// pollable.block();
        /// let Ok(n) = this.check-write(); // eliding error handling
        /// let len = min(n, num_zeroes);
        /// this.write-zeroes(len);         // eliding error handling
        /// num_zeroes -= len;
        /// }
        /// this.flush();
        /// // Wait for completion of `flush`
        /// pollable.block();
        /// // Check for any errors that arose during `flush`
        /// let _ = this.check-write();         // eliding error handling
        /// ```
        pub fn blocking_write_zeroes_and_flush(&self,len: u64,) -> Result<(),StreamError>{
          unsafe {
            #[repr(align(4))]
            struct RetArea([::core::mem::MaybeUninit::<u8>; 12]);
            let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
            let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "wasi:io/streams@0.2.1")]
            extern "C" {
              #[link_name = "[method]output-stream.blocking-write-zeroes-and-flush"]
              fn wit_import(_: i32, _: i64, _: *mut u8, );
            }

            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: i64, _: *mut u8, ){ unreachable!() }
            wit_import((self).handle() as i32, _rt::as_i64(&len), ptr0);
            let l1 = i32::from(*ptr0.add(0).cast::<u8>());
            match l1 {
              0 => {
                let e = ();
                Ok(e)
              }
              1 => {
                let e = {
                  let l2 = i32::from(*ptr0.add(4).cast::<u8>());
                  let v4 = match l2 {
                    0 => {
                      let e4 = {
                        let l3 = *ptr0.add(8).cast::<i32>();

                        super::super::super::wasi::io::error::Error::from_handle(l3 as u32)
                      };
                      StreamError::LastOperationFailed(e4)
                    }
                    n => {
                      debug_assert_eq!(n, 1, "invalid enum discriminant");
                      StreamError::Closed
                    }
                  };

                  v4
                };
                Err(e)
              }
              _ => _rt::invalid_enum_discriminant(),
            }
          }
        }
      }
      impl OutputStream {
        #[allow(unused_unsafe, clippy::all)]
        /// Read from one stream and write to another.
        ///
        /// The behavior of splice is equivalent to:
        /// 1. calling `check-write` on the `output-stream`
        /// 2. calling `read` on the `input-stream` with the smaller of the
        /// `check-write` permitted length and the `len` provided to `splice`
        /// 3. calling `write` on the `output-stream` with that read data.
        ///
        /// Any error reported by the call to `check-write`, `read`, or
        /// `write` ends the splice and reports that error.
        ///
        /// This function returns the number of bytes transferred; it may be less
        /// than `len`.
        pub fn splice(&self,src: &InputStream,len: u64,) -> Result<u64,StreamError>{
          unsafe {
            #[repr(align(8))]
            struct RetArea([::core::mem::MaybeUninit::<u8>; 16]);
            let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
            let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "wasi:io/streams@0.2.1")]
            extern "C" {
              #[link_name = "[method]output-stream.splice"]
              fn wit_import(_: i32, _: i32, _: i64, _: *mut u8, );
            }

            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: i32, _: i64, _: *mut u8, ){ unreachable!() }
            wit_import((self).handle() as i32, (src).handle() as i32, _rt::as_i64(&len), ptr0);
            let l1 = i32::from(*ptr0.add(0).cast::<u8>());
            match l1 {
              0 => {
                let e = {
                  let l2 = *ptr0.add(8).cast::<i64>();

                  l2 as u64
                };
                Ok(e)
              }
              1 => {
                let e = {
                  let l3 = i32::from(*ptr0.add(8).cast::<u8>());
                  let v5 = match l3 {
                    0 => {
                      let e5 = {
                        let l4 = *ptr0.add(12).cast::<i32>();

                        super::super::super::wasi::io::error::Error::from_handle(l4 as u32)
                      };
                      StreamError::LastOperationFailed(e5)
                    }
                    n => {
                      debug_assert_eq!(n, 1, "invalid enum discriminant");
                      StreamError::Closed
                    }
                  };

                  v5
                };
                Err(e)
              }
              _ => _rt::invalid_enum_discriminant(),
            }
          }
        }
      }
      impl OutputStream {
        #[allow(unused_unsafe, clippy::all)]
        /// Read from one stream and write to another, with blocking.
        ///
        /// This is similar to `splice`, except that it blocks until the
        /// `output-stream` is ready for writing, and the `input-stream`
        /// is ready for reading, before performing the `splice`.
        pub fn blocking_splice(&self,src: &InputStream,len: u64,) -> Result<u64,StreamError>{
          unsafe {
            #[repr(align(8))]
            struct RetArea([::core::mem::MaybeUninit::<u8>; 16]);
            let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
            let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "wasi:io/streams@0.2.1")]
            extern "C" {
              #[link_name = "[method]output-stream.blocking-splice"]
              fn wit_import(_: i32, _: i32, _: i64, _: *mut u8, );
            }

            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: i32, _: i64, _: *mut u8, ){ unreachable!() }
            wit_import((self).handle() as i32, (src).handle() as i32, _rt::as_i64(&len), ptr0);
            let l1 = i32::from(*ptr0.add(0).cast::<u8>());
            match l1 {
              0 => {
                let e = {
                  let l2 = *ptr0.add(8).cast::<i64>();

                  l2 as u64
                };
                Ok(e)
              }
              1 => {
                let e = {
                  let l3 = i32::from(*ptr0.add(8).cast::<u8>());
                  let v5 = match l3 {
                    0 => {
                      let e5 = {
                        let l4 = *ptr0.add(12).cast::<i32>();

                        super::super::super::wasi::io::error::Error::from_handle(l4 as u32)
                      };
                      StreamError::LastOperationFailed(e5)
                    }
                    n => {
                      debug_assert_eq!(n, 1, "invalid enum discriminant");
                      StreamError::Closed
                    }
                  };

                  v5
                };
                Err(e)
              }
              _ => _rt::invalid_enum_discriminant(),
            }
          }
        }
      }

    }

  }
  #[allow(dead_code)]
  pub mod nn {
    #[allow(dead_code, clippy::all)]
    pub mod tensor {
      #[used]
      #[doc(hidden)]
      static __FORCE_SECTION_REF: fn() =
      super::super::super::__link_custom_section_describing_imports;
      
      use super::super::super::_rt;
      /// The dimensions of a tensor.
      ///
      /// The array length matches the tensor rank and each element in the array describes the size of
      /// each dimension
      pub type TensorDimensions = _rt::Vec::<u32>;
      /// The type of the elements in a tensor.
      #[repr(u8)]
      #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
      pub enum TensorType {
        Fp16,
        Fp32,
        Fp64,
        Bf16,
        U8,
        I32,
        I64,
      }
      impl ::core::fmt::Debug for TensorType {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          match self {
            TensorType::Fp16 => {
              f.debug_tuple("TensorType::Fp16").finish()
            }
            TensorType::Fp32 => {
              f.debug_tuple("TensorType::Fp32").finish()
            }
            TensorType::Fp64 => {
              f.debug_tuple("TensorType::Fp64").finish()
            }
            TensorType::Bf16 => {
              f.debug_tuple("TensorType::Bf16").finish()
            }
            TensorType::U8 => {
              f.debug_tuple("TensorType::U8").finish()
            }
            TensorType::I32 => {
              f.debug_tuple("TensorType::I32").finish()
            }
            TensorType::I64 => {
              f.debug_tuple("TensorType::I64").finish()
            }
          }
        }
      }

      impl TensorType{
        #[doc(hidden)]
        pub unsafe fn _lift(val: u8) -> TensorType{
          if !cfg!(debug_assertions) {
            return ::core::mem::transmute(val);
          }

          match val {
            0 => TensorType::Fp16,
            1 => TensorType::Fp32,
            2 => TensorType::Fp64,
            3 => TensorType::Bf16,
            4 => TensorType::U8,
            5 => TensorType::I32,
            6 => TensorType::I64,

            _ => panic!("invalid enum discriminant"),
          }
        }
      }

      /// The tensor data.
      ///
      /// Initially conceived as a sparse representation, each empty cell would be filled with zeros
      /// and the array length must match the product of all of the dimensions and the number of bytes
      /// in the type (e.g., a 2x2 tensor with 4-byte f32 elements would have a data array of length
      /// 16). Naturally, this representation requires some knowledge of how to lay out data in
      /// memory--e.g., using row-major ordering--and could perhaps be improved.
      pub type TensorData = _rt::Vec::<u8>;

      #[derive(Debug)]
      #[repr(transparent)]
      pub struct Tensor{
        handle: _rt::Resource<Tensor>,
      }

      impl Tensor{
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
          Self {
            handle: _rt::Resource::from_handle(handle),
          }
        }

        #[doc(hidden)]
        pub fn take_handle(&self) -> u32 {
          _rt::Resource::take_handle(&self.handle)
        }

        #[doc(hidden)]
        pub fn handle(&self) -> u32 {
          _rt::Resource::handle(&self.handle)
        }
      }


      unsafe impl _rt::WasmResource for Tensor{
        #[inline]
        unsafe fn drop(_handle: u32) {
          #[cfg(not(target_arch = "wasm32"))]
          unreachable!();

          #[cfg(target_arch = "wasm32")]
          {
            #[link(wasm_import_module = "wasi:nn/tensor@0.2.0-rc-2024-08-19")]
            extern "C" {
              #[link_name = "[resource-drop]tensor"]
              fn drop(_: u32);
            }

            drop(_handle);
          }
        }
      }

      impl Tensor {
        #[allow(unused_unsafe, clippy::all)]
        pub fn new(dimensions: &TensorDimensions,ty: TensorType,data: &TensorData,) -> Self{
          unsafe {
            let vec0 = dimensions;
            let ptr0 = vec0.as_ptr().cast::<u8>();
            let len0 = vec0.len();
            let vec1 = data;
            let ptr1 = vec1.as_ptr().cast::<u8>();
            let len1 = vec1.len();

            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "wasi:nn/tensor@0.2.0-rc-2024-08-19")]
            extern "C" {
              #[link_name = "[constructor]tensor"]
              fn wit_import(_: *mut u8, _: usize, _: i32, _: *mut u8, _: usize, ) -> i32;
            }

            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: *mut u8, _: usize, _: i32, _: *mut u8, _: usize, ) -> i32{ unreachable!() }
            let ret = wit_import(ptr0.cast_mut(), len0, ty.clone() as i32, ptr1.cast_mut(), len1);
            Tensor::from_handle(ret as u32)
          }
        }
      }
      impl Tensor {
        #[allow(unused_unsafe, clippy::all)]
        /// Describe the size of the tensor (e.g., 2x2x2x2 -> [2, 2, 2, 2]). To represent a tensor
        /// containing a single value, use `[1]` for the tensor dimensions.
        pub fn dimensions(&self,) -> TensorDimensions{
          unsafe {
            #[repr(align(4))]
            struct RetArea([::core::mem::MaybeUninit::<u8>; 8]);
            let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
            let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "wasi:nn/tensor@0.2.0-rc-2024-08-19")]
            extern "C" {
              #[link_name = "[method]tensor.dimensions"]
              fn wit_import(_: i32, _: *mut u8, );
            }

            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: *mut u8, ){ unreachable!() }
            wit_import((self).handle() as i32, ptr0);
            let l1 = *ptr0.add(0).cast::<*mut u8>();
            let l2 = *ptr0.add(4).cast::<usize>();
            let len3 = l2;
            _rt::Vec::from_raw_parts(l1.cast(), len3, len3)
          }
        }
      }
      impl Tensor {
        #[allow(unused_unsafe, clippy::all)]
        /// Describe the type of element in the tensor (e.g., `f32`).
        pub fn ty(&self,) -> TensorType{
          unsafe {

            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "wasi:nn/tensor@0.2.0-rc-2024-08-19")]
            extern "C" {
              #[link_name = "[method]tensor.ty"]
              fn wit_import(_: i32, ) -> i32;
            }

            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, ) -> i32{ unreachable!() }
            let ret = wit_import((self).handle() as i32);
            TensorType::_lift(ret as u8)
          }
        }
      }
      impl Tensor {
        #[allow(unused_unsafe, clippy::all)]
        /// Return the tensor data.
        pub fn data(&self,) -> TensorData{
          unsafe {
            #[repr(align(4))]
            struct RetArea([::core::mem::MaybeUninit::<u8>; 8]);
            let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
            let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "wasi:nn/tensor@0.2.0-rc-2024-08-19")]
            extern "C" {
              #[link_name = "[method]tensor.data"]
              fn wit_import(_: i32, _: *mut u8, );
            }

            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: *mut u8, ){ unreachable!() }
            wit_import((self).handle() as i32, ptr0);
            let l1 = *ptr0.add(0).cast::<*mut u8>();
            let l2 = *ptr0.add(4).cast::<usize>();
            let len3 = l2;
            _rt::Vec::from_raw_parts(l1.cast(), len3, len3)
          }
        }
      }

    }

    #[allow(dead_code, clippy::all)]
    pub mod errors {
      #[used]
      #[doc(hidden)]
      static __FORCE_SECTION_REF: fn() =
      super::super::super::__link_custom_section_describing_imports;
      
      use super::super::super::_rt;
      #[repr(u8)]
      #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
      pub enum ErrorCode {
        /// Caller module passed an invalid argument.
        InvalidArgument,
        /// Invalid encoding.
        InvalidEncoding,
        /// The operation timed out.
        Timeout,
        /// Runtime Error.
        RuntimeError,
        /// Unsupported operation.
        UnsupportedOperation,
        /// Graph is too large.
        TooLarge,
        /// Graph not found.
        NotFound,
        /// The operation is insecure or has insufficient privilege to be performed.
        /// e.g., cannot access a hardware feature requested
        Security,
        /// The operation failed for an unspecified reason.
        Unknown,
      }
      impl ::core::fmt::Debug for ErrorCode {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          match self {
            ErrorCode::InvalidArgument => {
              f.debug_tuple("ErrorCode::InvalidArgument").finish()
            }
            ErrorCode::InvalidEncoding => {
              f.debug_tuple("ErrorCode::InvalidEncoding").finish()
            }
            ErrorCode::Timeout => {
              f.debug_tuple("ErrorCode::Timeout").finish()
            }
            ErrorCode::RuntimeError => {
              f.debug_tuple("ErrorCode::RuntimeError").finish()
            }
            ErrorCode::UnsupportedOperation => {
              f.debug_tuple("ErrorCode::UnsupportedOperation").finish()
            }
            ErrorCode::TooLarge => {
              f.debug_tuple("ErrorCode::TooLarge").finish()
            }
            ErrorCode::NotFound => {
              f.debug_tuple("ErrorCode::NotFound").finish()
            }
            ErrorCode::Security => {
              f.debug_tuple("ErrorCode::Security").finish()
            }
            ErrorCode::Unknown => {
              f.debug_tuple("ErrorCode::Unknown").finish()
            }
          }
        }
      }

      impl ErrorCode{
        #[doc(hidden)]
        pub unsafe fn _lift(val: u8) -> ErrorCode{
          if !cfg!(debug_assertions) {
            return ::core::mem::transmute(val);
          }

          match val {
            0 => ErrorCode::InvalidArgument,
            1 => ErrorCode::InvalidEncoding,
            2 => ErrorCode::Timeout,
            3 => ErrorCode::RuntimeError,
            4 => ErrorCode::UnsupportedOperation,
            5 => ErrorCode::TooLarge,
            6 => ErrorCode::NotFound,
            7 => ErrorCode::Security,
            8 => ErrorCode::Unknown,

            _ => panic!("invalid enum discriminant"),
          }
        }
      }


      #[derive(Debug)]
      #[repr(transparent)]
      pub struct Error{
        handle: _rt::Resource<Error>,
      }

      impl Error{
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
          Self {
            handle: _rt::Resource::from_handle(handle),
          }
        }

        #[doc(hidden)]
        pub fn take_handle(&self) -> u32 {
          _rt::Resource::take_handle(&self.handle)
        }

        #[doc(hidden)]
        pub fn handle(&self) -> u32 {
          _rt::Resource::handle(&self.handle)
        }
      }


      unsafe impl _rt::WasmResource for Error{
        #[inline]
        unsafe fn drop(_handle: u32) {
          #[cfg(not(target_arch = "wasm32"))]
          unreachable!();

          #[cfg(target_arch = "wasm32")]
          {
            #[link(wasm_import_module = "wasi:nn/errors@0.2.0-rc-2024-08-19")]
            extern "C" {
              #[link_name = "[resource-drop]error"]
              fn drop(_: u32);
            }

            drop(_handle);
          }
        }
      }

      impl Error {
        #[allow(unused_unsafe, clippy::all)]
        /// Return the error code.
        pub fn code(&self,) -> ErrorCode{
          unsafe {

            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "wasi:nn/errors@0.2.0-rc-2024-08-19")]
            extern "C" {
              #[link_name = "[method]error.code"]
              fn wit_import(_: i32, ) -> i32;
            }

            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, ) -> i32{ unreachable!() }
            let ret = wit_import((self).handle() as i32);
            ErrorCode::_lift(ret as u8)
          }
        }
      }
      impl Error {
        #[allow(unused_unsafe, clippy::all)]
        /// Errors can propagated with backend specific status through a string value.
        pub fn data(&self,) -> _rt::String{
          unsafe {
            #[repr(align(4))]
            struct RetArea([::core::mem::MaybeUninit::<u8>; 8]);
            let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
            let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "wasi:nn/errors@0.2.0-rc-2024-08-19")]
            extern "C" {
              #[link_name = "[method]error.data"]
              fn wit_import(_: i32, _: *mut u8, );
            }

            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: *mut u8, ){ unreachable!() }
            wit_import((self).handle() as i32, ptr0);
            let l1 = *ptr0.add(0).cast::<*mut u8>();
            let l2 = *ptr0.add(4).cast::<usize>();
            let len3 = l2;
            let bytes3 = _rt::Vec::from_raw_parts(l1.cast(), len3, len3);
            _rt::string_lift(bytes3)
          }
        }
      }

    }

    #[allow(dead_code, clippy::all)]
    pub mod inference {
      #[used]
      #[doc(hidden)]
      static __FORCE_SECTION_REF: fn() =
      super::super::super::__link_custom_section_describing_imports;
      
      use super::super::super::_rt;
      pub type Error = super::super::super::wasi::nn::errors::Error;
      pub type Tensor = super::super::super::wasi::nn::tensor::Tensor;
      /// Bind a `graph` to the input and output tensors for an inference.
      ///
      /// TODO: this may no longer be necessary in WIT
      /// (https://github.com/WebAssembly/wasi-nn/issues/43)

      #[derive(Debug)]
      #[repr(transparent)]
      pub struct GraphExecutionContext{
        handle: _rt::Resource<GraphExecutionContext>,
      }

      impl GraphExecutionContext{
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
          Self {
            handle: _rt::Resource::from_handle(handle),
          }
        }

        #[doc(hidden)]
        pub fn take_handle(&self) -> u32 {
          _rt::Resource::take_handle(&self.handle)
        }

        #[doc(hidden)]
        pub fn handle(&self) -> u32 {
          _rt::Resource::handle(&self.handle)
        }
      }


      unsafe impl _rt::WasmResource for GraphExecutionContext{
        #[inline]
        unsafe fn drop(_handle: u32) {
          #[cfg(not(target_arch = "wasm32"))]
          unreachable!();

          #[cfg(target_arch = "wasm32")]
          {
            #[link(wasm_import_module = "wasi:nn/inference@0.2.0-rc-2024-08-19")]
            extern "C" {
              #[link_name = "[resource-drop]graph-execution-context"]
              fn drop(_: u32);
            }

            drop(_handle);
          }
        }
      }

      impl GraphExecutionContext {
        #[allow(unused_unsafe, clippy::all)]
        /// Define the inputs to use for inference.
        pub fn set_input(&self,name: &str,tensor: Tensor,) -> Result<(),Error>{
          unsafe {
            #[repr(align(4))]
            struct RetArea([::core::mem::MaybeUninit::<u8>; 8]);
            let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
            let vec0 = name;
            let ptr0 = vec0.as_ptr().cast::<u8>();
            let len0 = vec0.len();
            let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "wasi:nn/inference@0.2.0-rc-2024-08-19")]
            extern "C" {
              #[link_name = "[method]graph-execution-context.set-input"]
              fn wit_import(_: i32, _: *mut u8, _: usize, _: i32, _: *mut u8, );
            }

            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: *mut u8, _: usize, _: i32, _: *mut u8, ){ unreachable!() }
            wit_import((self).handle() as i32, ptr0.cast_mut(), len0, (&tensor).take_handle() as i32, ptr1);
            let l2 = i32::from(*ptr1.add(0).cast::<u8>());
            match l2 {
              0 => {
                let e = ();
                Ok(e)
              }
              1 => {
                let e = {
                  let l3 = *ptr1.add(4).cast::<i32>();

                  super::super::super::wasi::nn::errors::Error::from_handle(l3 as u32)
                };
                Err(e)
              }
              _ => _rt::invalid_enum_discriminant(),
            }
          }
        }
      }
      impl GraphExecutionContext {
        #[allow(unused_unsafe, clippy::all)]
        /// Compute the inference on the given inputs.
        ///
        /// Note the expected sequence of calls: `set-input`, `compute`, `get-output`. TODO: this
        /// expectation could be removed as a part of
        /// https://github.com/WebAssembly/wasi-nn/issues/43.
        pub fn compute(&self,) -> Result<(),Error>{
          unsafe {
            #[repr(align(4))]
            struct RetArea([::core::mem::MaybeUninit::<u8>; 8]);
            let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
            let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "wasi:nn/inference@0.2.0-rc-2024-08-19")]
            extern "C" {
              #[link_name = "[method]graph-execution-context.compute"]
              fn wit_import(_: i32, _: *mut u8, );
            }

            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: *mut u8, ){ unreachable!() }
            wit_import((self).handle() as i32, ptr0);
            let l1 = i32::from(*ptr0.add(0).cast::<u8>());
            match l1 {
              0 => {
                let e = ();
                Ok(e)
              }
              1 => {
                let e = {
                  let l2 = *ptr0.add(4).cast::<i32>();

                  super::super::super::wasi::nn::errors::Error::from_handle(l2 as u32)
                };
                Err(e)
              }
              _ => _rt::invalid_enum_discriminant(),
            }
          }
        }
      }
      impl GraphExecutionContext {
        #[allow(unused_unsafe, clippy::all)]
        /// Extract the outputs after inference.
        pub fn get_output(&self,name: &str,) -> Result<Tensor,Error>{
          unsafe {
            #[repr(align(4))]
            struct RetArea([::core::mem::MaybeUninit::<u8>; 8]);
            let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
            let vec0 = name;
            let ptr0 = vec0.as_ptr().cast::<u8>();
            let len0 = vec0.len();
            let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "wasi:nn/inference@0.2.0-rc-2024-08-19")]
            extern "C" {
              #[link_name = "[method]graph-execution-context.get-output"]
              fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8, );
            }

            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8, ){ unreachable!() }
            wit_import((self).handle() as i32, ptr0.cast_mut(), len0, ptr1);
            let l2 = i32::from(*ptr1.add(0).cast::<u8>());
            match l2 {
              0 => {
                let e = {
                  let l3 = *ptr1.add(4).cast::<i32>();

                  super::super::super::wasi::nn::tensor::Tensor::from_handle(l3 as u32)
                };
                Ok(e)
              }
              1 => {
                let e = {
                  let l4 = *ptr1.add(4).cast::<i32>();

                  super::super::super::wasi::nn::errors::Error::from_handle(l4 as u32)
                };
                Err(e)
              }
              _ => _rt::invalid_enum_discriminant(),
            }
          }
        }
      }

    }

    #[allow(dead_code, clippy::all)]
    pub mod graph {
      #[used]
      #[doc(hidden)]
      static __FORCE_SECTION_REF: fn() =
      super::super::super::__link_custom_section_describing_imports;
      
      use super::super::super::_rt;
      pub type Error = super::super::super::wasi::nn::errors::Error;
      pub type GraphExecutionContext = super::super::super::wasi::nn::inference::GraphExecutionContext;
      /// An execution graph for performing inference (i.e., a model).

      #[derive(Debug)]
      #[repr(transparent)]
      pub struct Graph{
        handle: _rt::Resource<Graph>,
      }

      impl Graph{
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
          Self {
            handle: _rt::Resource::from_handle(handle),
          }
        }

        #[doc(hidden)]
        pub fn take_handle(&self) -> u32 {
          _rt::Resource::take_handle(&self.handle)
        }

        #[doc(hidden)]
        pub fn handle(&self) -> u32 {
          _rt::Resource::handle(&self.handle)
        }
      }


      unsafe impl _rt::WasmResource for Graph{
        #[inline]
        unsafe fn drop(_handle: u32) {
          #[cfg(not(target_arch = "wasm32"))]
          unreachable!();

          #[cfg(target_arch = "wasm32")]
          {
            #[link(wasm_import_module = "wasi:nn/graph@0.2.0-rc-2024-08-19")]
            extern "C" {
              #[link_name = "[resource-drop]graph"]
              fn drop(_: u32);
            }

            drop(_handle);
          }
        }
      }

      /// Describes the encoding of the graph. This allows the API to be implemented by various
      /// backends that encode (i.e., serialize) their graph IR with different formats.
      #[repr(u8)]
      #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
      pub enum GraphEncoding {
        Openvino,
        Onnx,
        Tensorflow,
        Pytorch,
        Tensorflowlite,
        Ggml,
        Autodetect,
      }
      impl ::core::fmt::Debug for GraphEncoding {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          match self {
            GraphEncoding::Openvino => {
              f.debug_tuple("GraphEncoding::Openvino").finish()
            }
            GraphEncoding::Onnx => {
              f.debug_tuple("GraphEncoding::Onnx").finish()
            }
            GraphEncoding::Tensorflow => {
              f.debug_tuple("GraphEncoding::Tensorflow").finish()
            }
            GraphEncoding::Pytorch => {
              f.debug_tuple("GraphEncoding::Pytorch").finish()
            }
            GraphEncoding::Tensorflowlite => {
              f.debug_tuple("GraphEncoding::Tensorflowlite").finish()
            }
            GraphEncoding::Ggml => {
              f.debug_tuple("GraphEncoding::Ggml").finish()
            }
            GraphEncoding::Autodetect => {
              f.debug_tuple("GraphEncoding::Autodetect").finish()
            }
          }
        }
      }

      impl GraphEncoding{
        #[doc(hidden)]
        pub unsafe fn _lift(val: u8) -> GraphEncoding{
          if !cfg!(debug_assertions) {
            return ::core::mem::transmute(val);
          }

          match val {
            0 => GraphEncoding::Openvino,
            1 => GraphEncoding::Onnx,
            2 => GraphEncoding::Tensorflow,
            3 => GraphEncoding::Pytorch,
            4 => GraphEncoding::Tensorflowlite,
            5 => GraphEncoding::Ggml,
            6 => GraphEncoding::Autodetect,

            _ => panic!("invalid enum discriminant"),
          }
        }
      }

      /// Define where the graph should be executed.
      #[repr(u8)]
      #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
      pub enum ExecutionTarget {
        Cpu,
        Gpu,
        Tpu,
      }
      impl ::core::fmt::Debug for ExecutionTarget {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          match self {
            ExecutionTarget::Cpu => {
              f.debug_tuple("ExecutionTarget::Cpu").finish()
            }
            ExecutionTarget::Gpu => {
              f.debug_tuple("ExecutionTarget::Gpu").finish()
            }
            ExecutionTarget::Tpu => {
              f.debug_tuple("ExecutionTarget::Tpu").finish()
            }
          }
        }
      }

      impl ExecutionTarget{
        #[doc(hidden)]
        pub unsafe fn _lift(val: u8) -> ExecutionTarget{
          if !cfg!(debug_assertions) {
            return ::core::mem::transmute(val);
          }

          match val {
            0 => ExecutionTarget::Cpu,
            1 => ExecutionTarget::Gpu,
            2 => ExecutionTarget::Tpu,

            _ => panic!("invalid enum discriminant"),
          }
        }
      }

      /// The graph initialization data.
      ///
      /// This gets bundled up into an array of buffers because implementing backends may encode their
      /// graph IR in parts (e.g., OpenVINO stores its IR and weights separately).
      pub type GraphBuilder = _rt::Vec::<u8>;
      impl Graph {
        #[allow(unused_unsafe, clippy::all)]
        pub fn init_execution_context(&self,) -> Result<GraphExecutionContext,Error>{
          unsafe {
            #[repr(align(4))]
            struct RetArea([::core::mem::MaybeUninit::<u8>; 8]);
            let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
            let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "wasi:nn/graph@0.2.0-rc-2024-08-19")]
            extern "C" {
              #[link_name = "[method]graph.init-execution-context"]
              fn wit_import(_: i32, _: *mut u8, );
            }

            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: *mut u8, ){ unreachable!() }
            wit_import((self).handle() as i32, ptr0);
            let l1 = i32::from(*ptr0.add(0).cast::<u8>());
            match l1 {
              0 => {
                let e = {
                  let l2 = *ptr0.add(4).cast::<i32>();

                  super::super::super::wasi::nn::inference::GraphExecutionContext::from_handle(l2 as u32)
                };
                Ok(e)
              }
              1 => {
                let e = {
                  let l3 = *ptr0.add(4).cast::<i32>();

                  super::super::super::wasi::nn::errors::Error::from_handle(l3 as u32)
                };
                Err(e)
              }
              _ => _rt::invalid_enum_discriminant(),
            }
          }
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      /// Load a `graph` from an opaque sequence of bytes to use for inference.
      pub fn load(builder: &[GraphBuilder],encoding: GraphEncoding,target: ExecutionTarget,) -> Result<Graph,Error>{
        unsafe {
          #[repr(align(4))]
          struct RetArea([::core::mem::MaybeUninit::<u8>; 8]);
          let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
          let vec1 = builder;
          let len1 = vec1.len();
          let layout1 = _rt::alloc::Layout::from_size_align_unchecked(vec1.len() * 8, 4);
          let result1 = if layout1.size() != 0 {
            let ptr = _rt::alloc::alloc(layout1).cast::<u8>();
            if ptr.is_null()
            {
              _rt::alloc::handle_alloc_error(layout1);
            }
            ptr
          }else {
            ::core::ptr::null_mut()
          };
          for (i, e) in vec1.into_iter().enumerate() {
            let base = result1.add(i * 8);
            {
              let vec0 = e;
              let ptr0 = vec0.as_ptr().cast::<u8>();
              let len0 = vec0.len();
              *base.add(4).cast::<usize>() = len0;
              *base.add(0).cast::<*mut u8>() = ptr0.cast_mut();
            }
          }
          let ptr2 = ret_area.0.as_mut_ptr().cast::<u8>();
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "wasi:nn/graph@0.2.0-rc-2024-08-19")]
          extern "C" {
            #[link_name = "load"]
            fn wit_import(_: *mut u8, _: usize, _: i32, _: i32, _: *mut u8, );
          }

          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: *mut u8, _: usize, _: i32, _: i32, _: *mut u8, ){ unreachable!() }
          wit_import(result1, len1, encoding.clone() as i32, target.clone() as i32, ptr2);
          let l3 = i32::from(*ptr2.add(0).cast::<u8>());
          if layout1.size() != 0 {
            _rt::alloc::dealloc(result1.cast(), layout1);
          }
          match l3 {
            0 => {
              let e = {
                let l4 = *ptr2.add(4).cast::<i32>();

                Graph::from_handle(l4 as u32)
              };
              Ok(e)
            }
            1 => {
              let e = {
                let l5 = *ptr2.add(4).cast::<i32>();

                super::super::super::wasi::nn::errors::Error::from_handle(l5 as u32)
              };
              Err(e)
            }
            _ => _rt::invalid_enum_discriminant(),
          }
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      /// Load a `graph` by name.
      ///
      /// How the host expects the names to be passed and how it stores the graphs for retrieval via
      /// this function is **implementation-specific**. This allows hosts to choose name schemes that
      /// range from simple to complex (e.g., URLs?) and caching mechanisms of various kinds.
      pub fn load_by_name(name: &str,) -> Result<Graph,Error>{
        unsafe {
          #[repr(align(4))]
          struct RetArea([::core::mem::MaybeUninit::<u8>; 8]);
          let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
          let vec0 = name;
          let ptr0 = vec0.as_ptr().cast::<u8>();
          let len0 = vec0.len();
          let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "wasi:nn/graph@0.2.0-rc-2024-08-19")]
          extern "C" {
            #[link_name = "load-by-name"]
            fn wit_import(_: *mut u8, _: usize, _: *mut u8, );
          }

          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: *mut u8, _: usize, _: *mut u8, ){ unreachable!() }
          wit_import(ptr0.cast_mut(), len0, ptr1);
          let l2 = i32::from(*ptr1.add(0).cast::<u8>());
          match l2 {
            0 => {
              let e = {
                let l3 = *ptr1.add(4).cast::<i32>();

                Graph::from_handle(l3 as u32)
              };
              Ok(e)
            }
            1 => {
              let e = {
                let l4 = *ptr1.add(4).cast::<i32>();

                super::super::super::wasi::nn::errors::Error::from_handle(l4 as u32)
              };
              Err(e)
            }
            _ => _rt::invalid_enum_discriminant(),
          }
        }
      }

    }

  }
  #[allow(dead_code)]
  pub mod random {
    #[allow(dead_code, clippy::all)]
    pub mod random {
      #[used]
      #[doc(hidden)]
      static __FORCE_SECTION_REF: fn() =
      super::super::super::__link_custom_section_describing_imports;
      
      use super::super::super::_rt;
      #[allow(unused_unsafe, clippy::all)]
      /// Return `len` cryptographically-secure random or pseudo-random bytes.
      ///
      /// This function must produce data at least as cryptographically secure and
      /// fast as an adequately seeded cryptographically-secure pseudo-random
      /// number generator (CSPRNG). It must not block, from the perspective of
      /// the calling program, under any circumstances, including on the first
      /// request and on requests for numbers of bytes. The returned data must
      /// always be unpredictable.
      ///
      /// This function must always return fresh data. Deterministic environments
      /// must omit this function, rather than implementing it with deterministic
      /// data.
      pub fn get_random_bytes(len: u64,) -> _rt::Vec::<u8>{
        unsafe {
          #[repr(align(4))]
          struct RetArea([::core::mem::MaybeUninit::<u8>; 8]);
          let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
          let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "wasi:random/random@0.2.1")]
          extern "C" {
            #[link_name = "get-random-bytes"]
            fn wit_import(_: i64, _: *mut u8, );
          }

          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i64, _: *mut u8, ){ unreachable!() }
          wit_import(_rt::as_i64(&len), ptr0);
          let l1 = *ptr0.add(0).cast::<*mut u8>();
          let l2 = *ptr0.add(4).cast::<usize>();
          let len3 = l2;
          _rt::Vec::from_raw_parts(l1.cast(), len3, len3)
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      /// Return a cryptographically-secure random or pseudo-random `u64` value.
      ///
      /// This function returns the same type of data as `get-random-bytes`,
      /// represented as a `u64`.
      pub fn get_random_u64() -> u64{
        unsafe {

          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "wasi:random/random@0.2.1")]
          extern "C" {
            #[link_name = "get-random-u64"]
            fn wit_import() -> i64;
          }

          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import() -> i64{ unreachable!() }
          let ret = wit_import();
          ret as u64
        }
      }

    }

  }
}
#[allow(dead_code)]
pub mod exports {
  #[allow(dead_code)]
  pub mod wasi {
    #[allow(dead_code)]
    pub mod cli {
      #[allow(dead_code, clippy::all)]
      pub mod run {
        #[used]
        #[doc(hidden)]
        static __FORCE_SECTION_REF: fn() =
        super::super::super::super::__link_custom_section_describing_imports;
        
        use super::super::super::super::_rt;
        #[doc(hidden)]
        #[allow(non_snake_case)]
        pub unsafe fn _export_run_cabi<T: Guest>() -> i32 {#[cfg(target_arch="wasm32")]
        _rt::run_ctors_once();let result0 = T::run();
        let result1 = match result0 {
          Ok(_) => { 0i32 },
          Err(_) => { 1i32 },
        };result1
      }
      pub trait Guest {
        /// Run the program.
        fn run() -> Result<(),()>;
      }
      #[doc(hidden)]

      macro_rules! __export_wasi_cli_run_0_2_1_cabi{
        ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

          #[export_name = "wasi:cli/run@0.2.1#run"]
          unsafe extern "C" fn export_run() -> i32 {
            $($path_to_types)*::_export_run_cabi::<$ty>()
          }
        };);
      }
      #[doc(hidden)]
      pub(crate) use __export_wasi_cli_run_0_2_1_cabi;

    }

  }
}
}
mod _rt {


  use core::fmt;
  use core::marker;
  use core::sync::atomic::{AtomicU32, Ordering::Relaxed};

  /// A type which represents a component model resource, either imported or
  /// exported into this component.
  ///
  /// This is a low-level wrapper which handles the lifetime of the resource
  /// (namely this has a destructor). The `T` provided defines the component model
  /// intrinsics that this wrapper uses.
  ///
  /// One of the chief purposes of this type is to provide `Deref` implementations
  /// to access the underlying data when it is owned.
  ///
  /// This type is primarily used in generated code for exported and imported
  /// resources.
  #[repr(transparent)]
  pub struct Resource<T: WasmResource> {
    // NB: This would ideally be `u32` but it is not. The fact that this has
    // interior mutability is not exposed in the API of this type except for the
    // `take_handle` method which is supposed to in theory be private.
    //
    // This represents, almost all the time, a valid handle value. When it's
    // invalid it's stored as `u32::MAX`.
    handle: AtomicU32,
    _marker: marker::PhantomData<T>,
  }

  /// A trait which all wasm resources implement, namely providing the ability to
  /// drop a resource.
  ///
  /// This generally is implemented by generated code, not user-facing code.
  #[allow(clippy::missing_safety_doc)]
  pub unsafe trait WasmResource {
    /// Invokes the `[resource-drop]...` intrinsic.
    unsafe fn drop(handle: u32);
  }

  impl<T: WasmResource> Resource<T> {
    #[doc(hidden)]
    pub unsafe fn from_handle(handle: u32) -> Self {
      debug_assert!(handle != u32::MAX);
      Self {
        handle: AtomicU32::new(handle),
        _marker: marker::PhantomData,
      }
    }

    /// Takes ownership of the handle owned by `resource`.
    ///
    /// Note that this ideally would be `into_handle` taking `Resource<T>` by
    /// ownership. The code generator does not enable that in all situations,
    /// unfortunately, so this is provided instead.
    ///
    /// Also note that `take_handle` is in theory only ever called on values
    /// owned by a generated function. For example a generated function might
    /// take `Resource<T>` as an argument but then call `take_handle` on a
    /// reference to that argument. In that sense the dynamic nature of
    /// `take_handle` should only be exposed internally to generated code, not
    /// to user code.
    #[doc(hidden)]
    pub fn take_handle(resource: &Resource<T>) -> u32 {
      resource.handle.swap(u32::MAX, Relaxed)
    }

    #[doc(hidden)]
    pub fn handle(resource: &Resource<T>) -> u32 {
      resource.handle.load(Relaxed)
    }
  }

  impl<T: WasmResource> fmt::Debug for Resource<T> {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      f.debug_struct("Resource")
      .field("handle", &self.handle)
      .finish()
    }
  }

  impl<T: WasmResource> Drop for Resource<T> {
    fn drop(&mut self) {
      unsafe {
        match self.handle.load(Relaxed) {
          // If this handle was "taken" then don't do anything in the
          // destructor.
          u32::MAX => {}

          // ... but otherwise do actually destroy it with the imported
          // component model intrinsic as defined through `T`.
          other => T::drop(other),
        }
      }
    }
  }
  pub unsafe fn bool_lift(val: u8) -> bool {
    if cfg!(debug_assertions) {
      match val {
        0 => false,
        1 => true,
        _ => panic!("invalid bool discriminant"),
      }
    } else {
      val != 0
    }
  }
  pub use alloc_crate::vec::Vec;
  pub use alloc_crate::alloc;

  pub fn as_i64<T: AsI64>(t: T) -> i64 {
    t.as_i64()
  }

  pub trait AsI64 {
    fn as_i64(self) -> i64;
  }

  impl<'a, T: Copy + AsI64> AsI64 for &'a T {
    fn as_i64(self) -> i64 {
      (*self).as_i64()
    }
  }
  
  impl AsI64 for i64 {
    #[inline]
    fn as_i64(self) -> i64 {
      self as i64
    }
  }
  
  impl AsI64 for u64 {
    #[inline]
    fn as_i64(self) -> i64 {
      self as i64
    }
  }
  pub use alloc_crate::string::String;
  pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
    if cfg!(debug_assertions) {
      String::from_utf8(bytes).unwrap()
    } else {
      String::from_utf8_unchecked(bytes)
    }
  }
  pub unsafe fn invalid_enum_discriminant<T>() -> T {
    if cfg!(debug_assertions) {
      panic!("invalid enum discriminant")
    } else {
      core::hint::unreachable_unchecked()
    }
  }
  
  pub fn as_i32<T: AsI32>(t: T) -> i32 {
    t.as_i32()
  }

  pub trait AsI32 {
    fn as_i32(self) -> i32;
  }

  impl<'a, T: Copy + AsI32> AsI32 for &'a T {
    fn as_i32(self) -> i32 {
      (*self).as_i32()
    }
  }
  
  impl AsI32 for i32 {
    #[inline]
    fn as_i32(self) -> i32 {
      self as i32
    }
  }
  
  impl AsI32 for u32 {
    #[inline]
    fn as_i32(self) -> i32 {
      self as i32
    }
  }
  
  impl AsI32 for i16 {
    #[inline]
    fn as_i32(self) -> i32 {
      self as i32
    }
  }
  
  impl AsI32 for u16 {
    #[inline]
    fn as_i32(self) -> i32 {
      self as i32
    }
  }
  
  impl AsI32 for i8 {
    #[inline]
    fn as_i32(self) -> i32 {
      self as i32
    }
  }
  
  impl AsI32 for u8 {
    #[inline]
    fn as_i32(self) -> i32 {
      self as i32
    }
  }
  
  impl AsI32 for char {
    #[inline]
    fn as_i32(self) -> i32 {
      self as i32
    }
  }
  
  impl AsI32 for usize {
    #[inline]
    fn as_i32(self) -> i32 {
      self as i32
    }
  }
  pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
    if size == 0 {
      return;
    }
    let layout = alloc::Layout::from_size_align_unchecked(size, align);
    alloc::dealloc(ptr, layout);
  }
  
  #[cfg(target_arch = "wasm32")]
  pub fn run_ctors_once() {
    wit_bindgen::rt::run_ctors_once();
  }
  extern crate alloc as alloc_crate;
}

/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_llm_impl {
  ($ty:ident) => (self::export!($ty with_types_in self););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::exports::wasi::cli::run::__export_wasi_cli_run_0_2_1_cabi!($ty with_types_in $($path_to_types_root)*::exports::wasi::cli::run);
  )
}
#[doc(inline)]
pub(crate) use __export_llm_impl as export;

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.33.0:hayride:broom@0.0.1:llm:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 6725] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xcb3\x01A\x02\x01A-\x01\
B\x05\x01r\x02\x07secondsw\x0bnanosecondsy\x04\0\x08datetime\x03\0\0\x01@\0\0\x01\
\x04\0\x03now\x01\x02\x04\0\x0aresolution\x01\x02\x03\0\x1cwasi:clocks/wall-cloc\
k@0.2.1\x05\0\x01B\x0a\x04\0\x08pollable\x03\x01\x01h\0\x01@\x01\x04self\x01\0\x7f\
\x04\0\x16[method]pollable.ready\x01\x02\x01@\x01\x04self\x01\x01\0\x04\0\x16[me\
thod]pollable.block\x01\x03\x01p\x01\x01py\x01@\x01\x02in\x04\0\x05\x04\0\x04pol\
l\x01\x06\x03\0\x12wasi:io/poll@0.2.1\x05\x01\x02\x03\0\x01\x08pollable\x01B\x0f\
\x02\x03\x02\x01\x02\x04\0\x08pollable\x03\0\0\x01w\x04\0\x07instant\x03\0\x02\x01\
w\x04\0\x08duration\x03\0\x04\x01@\0\0\x03\x04\0\x03now\x01\x06\x01@\0\0\x05\x04\
\0\x0aresolution\x01\x07\x01i\x01\x01@\x01\x04when\x03\0\x08\x04\0\x11subscribe-\
instant\x01\x09\x01@\x01\x04when\x05\0\x08\x04\0\x12subscribe-duration\x01\x0a\x03\
\0!wasi:clocks/monotonic-clock@0.2.1\x05\x03\x01B\x05\x01p}\x01@\x01\x03lenw\0\0\
\x04\0\x10get-random-bytes\x01\x01\x01@\0\0w\x04\0\x0eget-random-u64\x01\x02\x03\
\0\x18wasi:random/random@0.2.1\x05\x04\x01B\x04\x04\0\x05error\x03\x01\x01h\0\x01\
@\x01\x04self\x01\0s\x04\0\x1d[method]error.to-debug-string\x01\x02\x03\0\x13was\
i:io/error@0.2.1\x05\x05\x02\x03\0\x04\x05error\x01B(\x02\x03\x02\x01\x06\x04\0\x05\
error\x03\0\0\x02\x03\x02\x01\x02\x04\0\x08pollable\x03\0\x02\x01i\x01\x01q\x02\x15\
last-operation-failed\x01\x04\0\x06closed\0\0\x04\0\x0cstream-error\x03\0\x05\x04\
\0\x0cinput-stream\x03\x01\x04\0\x0doutput-stream\x03\x01\x01h\x07\x01p}\x01j\x01\
\x0a\x01\x06\x01@\x02\x04self\x09\x03lenw\0\x0b\x04\0\x19[method]input-stream.re\
ad\x01\x0c\x04\0\"[method]input-stream.blocking-read\x01\x0c\x01j\x01w\x01\x06\x01\
@\x02\x04self\x09\x03lenw\0\x0d\x04\0\x19[method]input-stream.skip\x01\x0e\x04\0\
\"[method]input-stream.blocking-skip\x01\x0e\x01i\x03\x01@\x01\x04self\x09\0\x0f\
\x04\0\x1e[method]input-stream.subscribe\x01\x10\x01h\x08\x01@\x01\x04self\x11\0\
\x0d\x04\0![method]output-stream.check-write\x01\x12\x01j\0\x01\x06\x01@\x02\x04\
self\x11\x08contents\x0a\0\x13\x04\0\x1b[method]output-stream.write\x01\x14\x04\0\
.[method]output-stream.blocking-write-and-flush\x01\x14\x01@\x01\x04self\x11\0\x13\
\x04\0\x1b[method]output-stream.flush\x01\x15\x04\0$[method]output-stream.blocki\
ng-flush\x01\x15\x01@\x01\x04self\x11\0\x0f\x04\0\x1f[method]output-stream.subsc\
ribe\x01\x16\x01@\x02\x04self\x11\x03lenw\0\x13\x04\0\"[method]output-stream.wri\
te-zeroes\x01\x17\x04\05[method]output-stream.blocking-write-zeroes-and-flush\x01\
\x17\x01@\x03\x04self\x11\x03src\x09\x03lenw\0\x0d\x04\0\x1c[method]output-strea\
m.splice\x01\x18\x04\0%[method]output-stream.blocking-splice\x01\x18\x03\0\x15wa\
si:io/streams@0.2.1\x05\x07\x02\x03\0\x05\x0cinput-stream\x02\x03\0\x05\x0doutpu\
t-stream\x02\x03\0\x05\x05error\x02\x03\0\0\x08datetime\x01Br\x02\x03\x02\x01\x08\
\x04\0\x0cinput-stream\x03\0\0\x02\x03\x02\x01\x09\x04\0\x0doutput-stream\x03\0\x02\
\x02\x03\x02\x01\x0a\x04\0\x05error\x03\0\x04\x02\x03\x02\x01\x0b\x04\0\x08datet\
ime\x03\0\x06\x01w\x04\0\x08filesize\x03\0\x08\x01m\x08\x07unknown\x0cblock-devi\
ce\x10character-device\x09directory\x04fifo\x0dsymbolic-link\x0cregular-file\x06\
socket\x04\0\x0fdescriptor-type\x03\0\x0a\x01n\x06\x04read\x05write\x13file-inte\
grity-sync\x13data-integrity-sync\x14requested-write-sync\x10mutate-directory\x04\
\0\x10descriptor-flags\x03\0\x0c\x01n\x01\x0esymlink-follow\x04\0\x0apath-flags\x03\
\0\x0e\x01n\x04\x06create\x09directory\x09exclusive\x08truncate\x04\0\x0aopen-fl\
ags\x03\0\x10\x01w\x04\0\x0alink-count\x03\0\x12\x01k\x07\x01r\x06\x04type\x0b\x0a\
link-count\x13\x04size\x09\x15data-access-timestamp\x14\x1bdata-modification-tim\
estamp\x14\x17status-change-timestamp\x14\x04\0\x0fdescriptor-stat\x03\0\x15\x01\
q\x03\x09no-change\0\0\x03now\0\0\x09timestamp\x01\x07\0\x04\0\x0dnew-timestamp\x03\
\0\x17\x01r\x02\x04type\x0b\x04names\x04\0\x0fdirectory-entry\x03\0\x19\x01m%\x06\
access\x0bwould-block\x07already\x0ebad-descriptor\x04busy\x08deadlock\x05quota\x05\
exist\x0efile-too-large\x15illegal-byte-sequence\x0bin-progress\x0binterrupted\x07\
invalid\x02io\x0cis-directory\x04loop\x0etoo-many-links\x0cmessage-size\x0dname-\
too-long\x09no-device\x08no-entry\x07no-lock\x13insufficient-memory\x12insuffici\
ent-space\x0dnot-directory\x09not-empty\x0fnot-recoverable\x0bunsupported\x06no-\
tty\x0eno-such-device\x08overflow\x0dnot-permitted\x04pipe\x09read-only\x0cinval\
id-seek\x0etext-file-busy\x0ccross-device\x04\0\x0aerror-code\x03\0\x1b\x01m\x06\
\x06normal\x0asequential\x06random\x09will-need\x09dont-need\x08no-reuse\x04\0\x06\
advice\x03\0\x1d\x01r\x02\x05lowerw\x05upperw\x04\0\x13metadata-hash-value\x03\0\
\x1f\x04\0\x0adescriptor\x03\x01\x04\0\x16directory-entry-stream\x03\x01\x01h!\x01\
i\x01\x01j\x01$\x01\x1c\x01@\x02\x04self#\x06offset\x09\0%\x04\0\"[method]descri\
ptor.read-via-stream\x01&\x01i\x03\x01j\x01'\x01\x1c\x01@\x02\x04self#\x06offset\
\x09\0(\x04\0#[method]descriptor.write-via-stream\x01)\x01@\x01\x04self#\0(\x04\0\
$[method]descriptor.append-via-stream\x01*\x01j\0\x01\x1c\x01@\x04\x04self#\x06o\
ffset\x09\x06length\x09\x06advice\x1e\0+\x04\0\x19[method]descriptor.advise\x01,\
\x01@\x01\x04self#\0+\x04\0\x1c[method]descriptor.sync-data\x01-\x01j\x01\x0d\x01\
\x1c\x01@\x01\x04self#\0.\x04\0\x1c[method]descriptor.get-flags\x01/\x01j\x01\x0b\
\x01\x1c\x01@\x01\x04self#\00\x04\0\x1b[method]descriptor.get-type\x011\x01@\x02\
\x04self#\x04size\x09\0+\x04\0\x1b[method]descriptor.set-size\x012\x01@\x03\x04s\
elf#\x15data-access-timestamp\x18\x1bdata-modification-timestamp\x18\0+\x04\0\x1c\
[method]descriptor.set-times\x013\x01p}\x01o\x024\x7f\x01j\x015\x01\x1c\x01@\x03\
\x04self#\x06length\x09\x06offset\x09\06\x04\0\x17[method]descriptor.read\x017\x01\
j\x01\x09\x01\x1c\x01@\x03\x04self#\x06buffer4\x06offset\x09\08\x04\0\x18[method\
]descriptor.write\x019\x01i\"\x01j\x01:\x01\x1c\x01@\x01\x04self#\0;\x04\0![meth\
od]descriptor.read-directory\x01<\x04\0\x17[method]descriptor.sync\x01-\x01@\x02\
\x04self#\x04paths\0+\x04\0&[method]descriptor.create-directory-at\x01=\x01j\x01\
\x16\x01\x1c\x01@\x01\x04self#\0>\x04\0\x17[method]descriptor.stat\x01?\x01@\x03\
\x04self#\x0apath-flags\x0f\x04paths\0>\x04\0\x1a[method]descriptor.stat-at\x01@\
\x01@\x05\x04self#\x0apath-flags\x0f\x04paths\x15data-access-timestamp\x18\x1bda\
ta-modification-timestamp\x18\0+\x04\0\x1f[method]descriptor.set-times-at\x01A\x01\
@\x05\x04self#\x0eold-path-flags\x0f\x08old-paths\x0enew-descriptor#\x08new-path\
s\0+\x04\0\x1a[method]descriptor.link-at\x01B\x01i!\x01j\x01\xc3\0\x01\x1c\x01@\x05\
\x04self#\x0apath-flags\x0f\x04paths\x0aopen-flags\x11\x05flags\x0d\0\xc4\0\x04\0\
\x1a[method]descriptor.open-at\x01E\x01j\x01s\x01\x1c\x01@\x02\x04self#\x04paths\
\0\xc6\0\x04\0\x1e[method]descriptor.readlink-at\x01G\x04\0&[method]descriptor.r\
emove-directory-at\x01=\x01@\x04\x04self#\x08old-paths\x0enew-descriptor#\x08new\
-paths\0+\x04\0\x1c[method]descriptor.rename-at\x01H\x01@\x03\x04self#\x08old-pa\
ths\x08new-paths\0+\x04\0\x1d[method]descriptor.symlink-at\x01I\x04\0![method]de\
scriptor.unlink-file-at\x01=\x01@\x02\x04self#\x05other#\0\x7f\x04\0![method]des\
criptor.is-same-object\x01J\x01j\x01\x20\x01\x1c\x01@\x01\x04self#\0\xcb\0\x04\0\
\x20[method]descriptor.metadata-hash\x01L\x01@\x03\x04self#\x0apath-flags\x0f\x04\
paths\0\xcb\0\x04\0#[method]descriptor.metadata-hash-at\x01M\x01h\"\x01k\x1a\x01\
j\x01\xcf\0\x01\x1c\x01@\x01\x04self\xce\0\0\xd0\0\x04\03[method]directory-entry\
-stream.read-directory-entry\x01Q\x01h\x05\x01k\x1c\x01@\x01\x03err\xd2\0\0\xd3\0\
\x04\0\x15filesystem-error-code\x01T\x03\0\x1bwasi:filesystem/types@0.2.1\x05\x0c\
\x02\x03\0\x06\x0adescriptor\x01B\x07\x02\x03\x02\x01\x0d\x04\0\x0adescriptor\x03\
\0\0\x01i\x01\x01o\x02\x02s\x01p\x03\x01@\0\0\x04\x04\0\x0fget-directories\x01\x05\
\x03\0\x1ewasi:filesystem/preopens@0.2.1\x05\x0e\x01B\x05\x02\x03\x02\x01\x09\x04\
\0\x0doutput-stream\x03\0\0\x01i\x01\x01@\0\0\x02\x04\0\x0aget-stdout\x01\x03\x03\
\0\x15wasi:cli/stdout@0.2.1\x05\x0f\x01B\x05\x02\x03\x02\x01\x09\x04\0\x0doutput\
-stream\x03\0\0\x01i\x01\x01@\0\0\x02\x04\0\x0aget-stderr\x01\x03\x03\0\x15wasi:\
cli/stderr@0.2.1\x05\x10\x01B\x05\x02\x03\x02\x01\x08\x04\0\x0cinput-stream\x03\0\
\0\x01i\x01\x01@\0\0\x02\x04\0\x09get-stdin\x01\x03\x03\0\x14wasi:cli/stdin@0.2.\
1\x05\x11\x01B\x0a\x01o\x02ss\x01p\0\x01@\0\0\x01\x04\0\x0fget-environment\x01\x02\
\x01ps\x01@\0\0\x03\x04\0\x0dget-arguments\x01\x04\x01ks\x01@\0\0\x05\x04\0\x0bi\
nitial-cwd\x01\x06\x03\0\x1awasi:cli/environment@0.2.1\x05\x12\x01B\x11\x01py\x04\
\0\x11tensor-dimensions\x03\0\0\x01m\x07\x04FP16\x04FP32\x04FP64\x04BF16\x02U8\x03\
I32\x03I64\x04\0\x0btensor-type\x03\0\x02\x01p}\x04\0\x0btensor-data\x03\0\x04\x04\
\0\x06tensor\x03\x01\x01i\x06\x01@\x03\x0adimensions\x01\x02ty\x03\x04data\x05\0\
\x07\x04\0\x13[constructor]tensor\x01\x08\x01h\x06\x01@\x01\x04self\x09\0\x01\x04\
\0\x19[method]tensor.dimensions\x01\x0a\x01@\x01\x04self\x09\0\x03\x04\0\x11[met\
hod]tensor.ty\x01\x0b\x01@\x01\x04self\x09\0\x05\x04\0\x13[method]tensor.data\x01\
\x0c\x03\0\"wasi:nn/tensor@0.2.0-rc-2024-08-19\x05\x13\x01B\x08\x01m\x09\x10inva\
lid-argument\x10invalid-encoding\x07timeout\x0druntime-error\x15unsupported-oper\
ation\x09too-large\x09not-found\x08security\x07unknown\x04\0\x0aerror-code\x03\0\
\0\x04\0\x05error\x03\x01\x01h\x02\x01@\x01\x04self\x03\0\x01\x04\0\x12[method]e\
rror.code\x01\x04\x01@\x01\x04self\x03\0s\x04\0\x12[method]error.data\x01\x05\x03\
\0\"wasi:nn/errors@0.2.0-rc-2024-08-19\x05\x14\x02\x03\0\x0d\x05error\x02\x03\0\x0c\
\x06tensor\x02\x03\0\x0c\x0btensor-data\x01B\x12\x02\x03\x02\x01\x15\x04\0\x05er\
ror\x03\0\0\x02\x03\x02\x01\x16\x04\0\x06tensor\x03\0\x02\x02\x03\x02\x01\x17\x04\
\0\x0btensor-data\x03\0\x04\x04\0\x17graph-execution-context\x03\x01\x01h\x06\x01\
i\x03\x01i\x01\x01j\0\x01\x09\x01@\x03\x04self\x07\x04names\x06tensor\x08\0\x0a\x04\
\0)[method]graph-execution-context.set-input\x01\x0b\x01@\x01\x04self\x07\0\x0a\x04\
\0'[method]graph-execution-context.compute\x01\x0c\x01j\x01\x08\x01\x09\x01@\x02\
\x04self\x07\x04names\0\x0d\x04\0*[method]graph-execution-context.get-output\x01\
\x0e\x03\0%wasi:nn/inference@0.2.0-rc-2024-08-19\x05\x18\x02\x03\0\x0e\x17graph-\
execution-context\x01B\x1a\x02\x03\x02\x01\x15\x04\0\x05error\x03\0\0\x02\x03\x02\
\x01\x16\x04\0\x06tensor\x03\0\x02\x02\x03\x02\x01\x19\x04\0\x17graph-execution-\
context\x03\0\x04\x04\0\x05graph\x03\x01\x01m\x07\x08openvino\x04onnx\x0atensorf\
low\x07pytorch\x0etensorflowlite\x04ggml\x0aautodetect\x04\0\x0egraph-encoding\x03\
\0\x07\x01m\x03\x03cpu\x03gpu\x03tpu\x04\0\x10execution-target\x03\0\x09\x01p}\x04\
\0\x0dgraph-builder\x03\0\x0b\x01h\x06\x01i\x05\x01i\x01\x01j\x01\x0e\x01\x0f\x01\
@\x01\x04self\x0d\0\x10\x04\0$[method]graph.init-execution-context\x01\x11\x01p\x0c\
\x01i\x06\x01j\x01\x13\x01\x0f\x01@\x03\x07builder\x12\x08encoding\x08\x06target\
\x0a\0\x14\x04\0\x04load\x01\x15\x01@\x01\x04names\0\x14\x04\0\x0cload-by-name\x01\
\x16\x03\0!wasi:nn/graph@0.2.0-rc-2024-08-19\x05\x1a\x01B\x03\x01j\0\0\x01@\0\0\0\
\x04\0\x03run\x01\x01\x04\0\x12wasi:cli/run@0.2.1\x05\x1b\x04\0\x17hayride:broom\
/llm@0.0.1\x04\0\x0b\x09\x01\0\x03llm\x03\0\0\0G\x09producers\x01\x0cprocessed-b\
y\x02\x0dwit-component\x070.218.0\x10wit-bindgen-rust\x060.33.0";

#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
  wit_bindgen::rt::maybe_link_cabi_realloc();
}

